/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package jsdt.action.sbsj;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;

import javax.servlet.RequestDispatcher;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jsdt.model.Jqxx;
import jsdt.model.Nsrxx;
import jsdt.model.Sbsj;
import jsdt.tools.Query;
import jsdt.tools.Util;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

/**
 * MyEclipse Struts Creation date: 03-11-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="op" validate="true"
 */
public class SbsjAction extends DispatchAction {
	Logger log=Logger.getLogger(SbsjAction.class);
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward toZrysb(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("zrysb");
	}

	// 自然月数据用户卡成功后进入这个action
	public ActionForward sbsjdk(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		HttpSession session = request.getSession();
		String yhswjgbmStr = (String) session.getAttribute("yhswjgbmStr");
		String old_nsrwjbm = request.getParameter("nsrwjbm");
		String nsrwjbm = "";
		String kpjzrq = "";
		HashMap sbinfo = new HashMap();
		DecimalFormat dg = new DecimalFormat("0.00");
		Query.updateField("delete from skq_jqszsm where smbm=''");
		HashMap cardInfo = (HashMap) session.getAttribute("UCARDINFO");
		if (cardInfo == null || cardInfo.isEmpty()) {
			request.setAttribute("errorMsg", "卡基本信息读取失败，请检查！");
			return mapping.findForward("error");
		} else {
			HashMap kxx = (HashMap) cardInfo.get("EF02");
			HashMap EF01 = (HashMap) cardInfo.get("EF01");
			HashMap EF06 = (HashMap) cardInfo.get("EF06");
			String jqbh = (String) EF06.get("JQBH");
			 String card_nsrwjbm=(String)kxx.get("NSRWJDM");
			Nsrxx nsrxx = new Nsrxx();
			String fieldname = "NSRWJBM";
			String where = " where JQBH='" + jqbh + "' AND NSRWJBM like '%"+card_nsrwjbm+"%' and STATUS=1";
			String table = " SKQ_JQXX";
			nsrxx.setTable(table);
			nsrwjbm = nsrxx.getField(fieldname, where);

			if (nsrwjbm == null || "".equals(nsrwjbm)) {
				request.setAttribute("errorMsg", "纳税户不存在！");
				return mapping.findForward("error");
			} else {
				nsrxx = new Nsrxx(nsrwjbm);

				int sid = nsrxx.getSid();
				if (sid == 0) {
					request.setAttribute("errorMsg", "纳税户不存在！");
					return mapping.findForward("error");
				} else {
					if (old_nsrwjbm != null && !"".equals(old_nsrwjbm)) {
						if (!old_nsrwjbm.equals(nsrwjbm)) {
							request.setAttribute("errorMsg", "不是之前纳税户，请重新插卡");
							return mapping.findForward("error");
						}
					}
					int status = nsrxx.getStatus();
					if (status != 1) {
						request.setAttribute("errorMsg", "纳税户已注销！");
						return mapping.findForward("error");
					} else {
						String username = (String) session
								.getAttribute("username");
						int flag = 1;
						if (!"system".equals(username)) {
							flag = 0;
						}
						if (flag == 0) {
							String swjgbm = nsrxx.getSwjgbm();
							if (yhswjgbmStr.indexOf(swjgbm) >= 0) {
								flag = 1;
							} else {
								request.setAttribute("errorMsg",
										"该纳税户不在您管辖范围内，不能进行月汇总申报！");
								return mapping.findForward("error");
							}
						}

						if (flag == 1) {
							sbinfo = (HashMap) cardInfo.get("EF04");
							if (sbinfo == null || sbinfo.isEmpty()) {
								request.setAttribute("errorMsg",
										"无申报，请先在机器上申报！");
								return mapping.findForward("error");
							} else {
								String startdate = (String) sbinfo
										.get("startdate");
								String enddate = (String) sbinfo.get("enddate");

								startdate = startdate.substring(0, 4) + '-'
										+ startdate.substring(4, 6) + '-'
										+ startdate.substring(6, 8);
								enddate = enddate.substring(0, 4) + '-'
										+ enddate.substring(4, 6) + '-'
										+ enddate.substring(6, 8);
								System.out.println("startdate==" + startdate);
								System.out.println("enddate==" + enddate);

								SimpleDateFormat sdf = new SimpleDateFormat(
										"yyyy-MM-dd");

								fieldname = "SID";
								where = " where SSKSSJ='" + startdate
										+ "' and SSJZSJ='" + enddate
										+ "' and JQBH='" + jqbh + "'";
								table = " SKQ_SBSJ";
								nsrxx.setTable(table);
								sid = nsrxx.getFieldInt(fieldname, where);

								if (sid != 0) {
									request.setAttribute("errorMsg",
											"申报数据已存在，不能重复申报！");
									return mapping.findForward("error");
								} else {
									// 保存申报数据
									double normalsum1 = Double
											.parseDouble((String) sbinfo
													.get("normalsum1"));
									normalsum1 = Double.parseDouble(dg
											.format(normalsum1 / 100));

									double normalsum2 = Double
											.parseDouble((String) sbinfo
													.get("normalsum2"));
									normalsum2 = Double.parseDouble(dg
											.format(normalsum2 / 100));

									double normalsum3 = Double
											.parseDouble((String) sbinfo
													.get("normalsum3"));
									normalsum3 = Double.parseDouble(dg
											.format(normalsum3 / 100));

									double normalsum4 = Double
											.parseDouble((String) sbinfo
													.get("normalsum4"));
									normalsum4 = Double.parseDouble(dg
											.format(normalsum4 / 100));

									double normalsum5 = Double
											.parseDouble((String) sbinfo
													.get("normalsum5"));
									normalsum5 = Double.parseDouble(dg
											.format(normalsum5 / 100));

									double normalsum6 = Double
											.parseDouble((String) sbinfo
													.get("normalsum6"));
									normalsum6 = Double.parseDouble(dg
											.format(normalsum6 / 100));

									double backsum1 = Double
											.parseDouble((String) sbinfo
													.get("backsum1"));
									backsum1 = Double.parseDouble(dg
											.format(backsum1 / 100));

									double backsum2 = Double
											.parseDouble((String) sbinfo
													.get("backsum2"));
									backsum2 = Double.parseDouble(dg
											.format(backsum2 / 100));

									double backsum3 = Double
											.parseDouble((String) sbinfo
													.get("backsum3"));
									backsum3 = Double.parseDouble(dg
											.format(backsum3 / 100));

									double backsum4 = Double
											.parseDouble((String) sbinfo
													.get("backsum4"));
									backsum4 = Double.parseDouble(dg
											.format(backsum4 / 100));

									double backsum5 = Double
											.parseDouble((String) sbinfo
													.get("backsum5"));
									backsum5 = Double.parseDouble(dg
											.format(backsum5 / 100));

									double backsum6 = Double
											.parseDouble((String) sbinfo
													.get("backsum6"));
									backsum6 = Double.parseDouble(dg
											.format(backsum6 / 100));

									double normalsum = Double.parseDouble(dg
											.format(normalsum1 + normalsum2
													+ normalsum3 + normalsum4
													+ normalsum5 + normalsum6));

									double backsum = Double.parseDouble(dg
											.format(backsum1 + backsum2
													+ backsum3 + backsum4
													+ backsum5 + backsum6));

									Sbsj sbsj = new Sbsj();
									sbsj.setNsrwjbm(nsrwjbm);
									sbsj.setJqbh(jqbh);
									sbsj.setZcpfs(Integer
											.parseInt((String) sbinfo
													.get("normalcnt")));
									sbsj.setTpfs(Integer
											.parseInt((String) sbinfo
													.get("backcnt")));
									sbsj.setFpfs(Integer
											.parseInt((String) sbinfo
													.get("deposecnt")));
									sbsj.setSskssj(startdate);
									sbsj.setSsjzsj(enddate);
									sbsj.setZcpzje(normalsum);
									sbsj.setTpzje(backsum);
									sbsj.setSbrq(sdf.format(new Date()));
									sbsj.setSblx(1);

									int result = sbsj.add();
									if (result != -1) {
										fieldname = "SID";
										where = " where NSRWJBM='" + nsrwjbm
												+ "' and JQBH='" + jqbh
												+ "' and SSKSSJ='" + startdate
												+ "'";
										table = "SKQ_SBSJ";
										sbsj.setTable(table);
										sid = sbsj
												.getFieldInt(fieldname, where);
										ArrayList sbzbxx = new ArrayList();
										if (normalsum1 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index1"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum1);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (normalsum2 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index2"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum2);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (normalsum3 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index3"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum3);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (normalsum4 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index4"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum4);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (normalsum5 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index5"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum5);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (normalsum6 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index6"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy+"and SMMC='其他' or SMMC='其它'";
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum6);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (backsum1 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index1"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum1 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}
										if (backsum2 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index2"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum2 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}
										if (backsum3 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index3"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum3 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}
										if (backsum4 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index4"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum4 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}
										if (backsum5 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index5"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum5 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}
										if (backsum6 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index6"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy+"and SMMC='其他' or SMMC='其它'";
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum6 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}

										if (sbzbxx != null && !sbzbxx.isEmpty()) {
											sbsj.addZb(sbzbxx);
										}

										// 从数据库读取申报数据
										sbsj = new Sbsj(sid);

										// 纳税户信息
										nsrxx = new Nsrxx(nsrwjbm);
										ArrayList nsrjqxx = nsrxx.getNsrjqxx();
										int jqsl = nsrjqxx.size();

										// 本月已申报机器数量
										int ysbjqsl = sbsj
												.selectSbNum(
														Util
																.getPreviousMonthFirst(),
														Util
																.getPreviousMonthEnd(),
														nsrwjbm);
										int sbflag = 1;
										String jqmsg = "";
										if ((jqsl - ysbjqsl) > 0) {
											sbflag = 0;
											jqmsg = "您共有 " + jqsl
													+ " 台机器，已申报  " + ysbjqsl
													+ "台，还有 "
													+ (jqsl - ysbjqsl)
													+ " 台未申报";
										} else {
											jqmsg = "您共有 " + jqsl
													+ " 台机器，已全部申报";
										}

										ArrayList alJdsb = new ArrayList();
										// 上月第一天
										String previousMonthFirst = Util
												.getPreviousMonthFirst();
										// 上月最后一天
										String previousMonthEnd = Util
												.getPreviousMonthEnd();

										// 阶段申报数据
										alJdsb = sbsj.selectJdsb(
												previousMonthFirst,
												previousMonthEnd, nsrwjbm);

										HashMap hmSb = new HashMap();
										hmSb.put("nsrxx", nsrxx);
										hmSb.put("sbsj", sbsj);
										hmSb.put("alJdsb", alJdsb);
										hmSb.put("jqmsg", jqmsg);
										hmSb.put("sbflag", sbflag);
                                        
										request.setAttribute("hmSb", hmSb);
										return mapping.findForward("zrysbList");
									} else {
										request.setAttribute("errorMsg",
												"申报数据保存失败！");
										return mapping.findForward("error");
									}
								}
							}
						}
					}
				}
			}
		}
		return null;
	}

	public ActionForward sbhzsj(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");

		// 上月第一天
		String previousMonthFirst = Util.getPreviousMonthFirst();
		// 上月最后一天
		String previousMonthEnd = Util.getPreviousMonthEnd();

		Sbsj sbsj = new Sbsj();

		ArrayList alSbsj = sbsj.selectAllSbsj(previousMonthFirst,
				previousMonthEnd, nsrwjbm);

		Calendar c = Calendar.getInstance();
		c.add(Calendar.MONTH, -1);
		SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd");
		String premonth = dateformat.format(c.getTime());
		int year = Integer.parseInt(premonth.substring(0, 4));
		int month = Integer.parseInt(premonth.substring(5, 7));

		if (alSbsj != null && !alSbsj.isEmpty()) {
			Iterator it = alSbsj.iterator();
			int zcpfs = 0;
			int tpfs = 0;
			int fpfs = 0;
			double zcpzje = 0;
			double tpzje = 0;
			String sidStr = "";
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
			String hzrq = sdf.format(new Date());
			while (it.hasNext()) {
				Sbsj sbsj1 = (Sbsj) it.next();

				zcpfs = zcpfs + sbsj1.getZcpfs();
				tpfs = tpfs + sbsj1.getTpfs();
				fpfs = fpfs + sbsj1.getFpfs();
				zcpzje = zcpzje + sbsj1.getZcpzje();
				tpzje = tpzje + sbsj1.getTpzje();

				if ("".equals(sidStr)) {
					sidStr = sidStr + sbsj1.getSid();
				} else {
					sidStr = sidStr + "," + sbsj1.getSid();
				}
			}
			if ("".equals(sidStr)) {
				sidStr = "0";
			}
			ArrayList alSbsjzb = sbsj.selectAllSbsjzb(sidStr);

			// System.out.println("alSbsjzb=="+alSbsjzb);
			sbsj.setNsrwjbm(nsrwjbm);
			sbsj.setZcpfs(zcpfs);
			sbsj.setTpfs(tpfs);
			sbsj.setFpfs(fpfs);
			sbsj.setZcpzje(zcpzje);
			sbsj.setTpzje(tpzje);
			sbsj.setYear(year);
			sbsj.setMonth(month);
			sbsj.setHzrq(hzrq);
			String fieldname = "SID";
			String where = " where NSRWJBM='" + nsrwjbm + "' and YEAR=" + year
					+ " and MONTH=" + month;
			String table = "SKQ_HZSJ";
			sbsj.setTable(table);
			int sid = sbsj.getFieldInt(fieldname, where);
			if (sid != 0) {
				request.setAttribute("errorMsg", "汇总数据已生成！");
				return mapping.findForward("error");
			} else {
				int result = sbsj.addSbhz();
				if (result != -1) {
					sid = sbsj.getFieldInt(fieldname, where);
					fieldname = "ZSFS";
					String sql = "select ZSFS from SKQ_NSRXX where NSRWJBM='"
							+ nsrwjbm + "' and STATUS=1";
					int zsfs = Query.getFieldInt(sql, fieldname);
					System.out.println("zsfs==" + zsfs);
					Iterator ite = alSbsjzb.iterator();
					double yhdeszsm = 0;
					while (ite.hasNext()) {
						HashMap hmsbsjzb = (HashMap) ite.next();

						String smbm = (String) hmsbsjzb.get("smbm");
						String yf = previousMonthFirst.substring(0, 4)
								+ previousMonthFirst.substring(5, 7);
						if (zsfs == 1) {
							yhdeszsm = sbsj.getZgYhdeSzsm(nsrwjbm, smbm, yf);
							hmsbsjzb.put("yhde", yhdeszsm);
						}
					}

					sbsj.addSbhzzb(alSbsjzb, sid);

					Sbsj sbhz = new Sbsj(sid, 0);

					Nsrxx nsrxx = new Nsrxx(nsrwjbm);
					HashMap hmSbhz = new HashMap();
					hmSbhz.put("nsrxx", nsrxx);
					hmSbhz.put("sbhz", sbhz);
					hmSbhz.put("alSbsjzb", alSbsjzb);

					request.setAttribute("hmSbhz", hmSbhz);
					return mapping.findForward("sbhzxx");
				} else {
					request.setAttribute("errorMsg", "汇总数据保存失败！");
					return mapping.findForward("error");
				}
			}
		}
		return null;
	}

	public ActionForward toJdsb(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toJdsb");
	}

	public ActionForward jdsbsjdk(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String yhswjgbmStr = (String) session.getAttribute("yhswjgbmStr");
		String nsrwjbm = "";
		String kpjzrq = "";
		HashMap sbinfo = new HashMap();
		DecimalFormat dg = new DecimalFormat("0.00");

		HashMap cardInfo = (HashMap) session.getAttribute("UCARDINFO");
		
		if (cardInfo == null || cardInfo.isEmpty()) {
			request.setAttribute("errorMsg", "卡基本信息读取失败，请检查！");
			return mapping.findForward("error");
		} else {
			HashMap kxx = (HashMap) cardInfo.get("EF02");
			HashMap EF01 = (HashMap) cardInfo.get("EF01");
			HashMap EF06 = (HashMap) cardInfo.get("EF06");
			String jqbh = (String) EF06.get("JQBH");
			 String card_nsrwjbm=(String)kxx.get("NSRWJDM");
			Nsrxx nsrxx = new Nsrxx();
			String fieldname = "NSRWJBM";
			String where = " where JQBH='" + jqbh + "' and NSRWJBM like '%"+card_nsrwjbm+"%' and STATUS=1";
			String table = " SKQ_JQXX";
			nsrxx.setTable(table);
			nsrwjbm = nsrxx.getField(fieldname, where);

			if (nsrwjbm == null || "".equals(nsrwjbm)) {
				request.setAttribute("errorMsg", "纳税户不存在！");
				return mapping.findForward("error");
			} else {
				nsrxx = new Nsrxx(nsrwjbm);

				int sid = nsrxx.getSid();
				if (sid == 0) {
					request.setAttribute("errorMsg", "纳税户不存在！");
					return mapping.findForward("error");
				} else {
					int status = nsrxx.getStatus();
					if (status != 1) {
						request.setAttribute("errorMsg", "纳税户已注销！");
						return mapping.findForward("error");
					} else {
						String swjgbm = nsrxx.getSwjgbm();
						String username = (String) session
								.getAttribute("username");
						if ("system".equals(username)) {
							sbinfo = (HashMap) cardInfo.get("EF04");
							if (sbinfo == null || sbinfo.isEmpty()) {
								request.setAttribute("errorMsg",
										"无申报，请先在机器上申报！");
								return mapping.findForward("error");
							} else {
								String startdate = (String) sbinfo
										.get("startdate");
								String enddate = (String) sbinfo.get("enddate");

								startdate = startdate.substring(0, 4) + '-'
										+ startdate.substring(4, 6) + '-'
										+ startdate.substring(6, 8);
								enddate = enddate.substring(0, 4) + '-'
										+ enddate.substring(4, 6) + '-'
										+ enddate.substring(6, 8);

								SimpleDateFormat sdf = new SimpleDateFormat(
										"yyyy-MM-dd");
								String nowtime = sdf.format(new Date());

								fieldname = "SID";
								where = " where SSKSSJ='" + startdate
										+ "' and SSJZSJ='" + enddate
										+ "' and JQBH='" + jqbh + "'";
								table = " SKQ_SBSJ";
								nsrxx.setTable(table);
								sid = nsrxx.getFieldInt(fieldname, where);

								if (sid != 0) {
									request.setAttribute("errorMsg",
											"申报数据已存在，不能重复申报！");
									return mapping.findForward("error");
								} else {
									// 保存申报数据
									double normalsum1 = Double
											.parseDouble((String) sbinfo
													.get("normalsum1"));
									normalsum1 = Double.parseDouble(dg
											.format(normalsum1 / 100));

									double normalsum2 = Double
											.parseDouble((String) sbinfo
													.get("normalsum2"));
									normalsum2 = Double.parseDouble(dg
											.format(normalsum2 / 100));

									double normalsum3 = Double
											.parseDouble((String) sbinfo
													.get("normalsum3"));
									normalsum3 = Double.parseDouble(dg
											.format(normalsum3 / 100));

									double normalsum4 = Double
											.parseDouble((String) sbinfo
													.get("normalsum4"));
									normalsum4 = Double.parseDouble(dg
											.format(normalsum4 / 100));

									double normalsum5 = Double
											.parseDouble((String) sbinfo
													.get("normalsum5"));
									normalsum5 = Double.parseDouble(dg
											.format(normalsum5 / 100));

									double normalsum6 = Double
											.parseDouble((String) sbinfo
													.get("normalsum6"));
									normalsum6 = Double.parseDouble(dg
											.format(normalsum6 / 100));

									double backsum1 = Double
											.parseDouble((String) sbinfo
													.get("backsum1"));
									backsum1 = Double.parseDouble(dg
											.format(backsum1 / 100));

									double backsum2 = Double
											.parseDouble((String) sbinfo
													.get("backsum2"));
									backsum2 = Double.parseDouble(dg
											.format(backsum2 / 100));

									double backsum3 = Double
											.parseDouble((String) sbinfo
													.get("backsum3"));
									backsum3 = Double.parseDouble(dg
											.format(backsum3 / 100));

									double backsum4 = Double
											.parseDouble((String) sbinfo
													.get("backsum4"));
									backsum4 = Double.parseDouble(dg
											.format(backsum4 / 100));

									double backsum5 = Double
											.parseDouble((String) sbinfo
													.get("backsum5"));
									backsum5 = Double.parseDouble(dg
											.format(backsum5 / 100));

									double backsum6 = Double
											.parseDouble((String) sbinfo
													.get("backsum6"));
									backsum6 = Double.parseDouble(dg
											.format(backsum6 / 100));

									double normalsum = Double.parseDouble(dg
											.format(normalsum1 + normalsum2
													+ normalsum3 + normalsum4
													+ normalsum5 + normalsum6));

									double backsum = Double.parseDouble(dg
											.format(backsum1 + backsum2
													+ backsum3 + backsum4
													+ backsum5 + backsum6));

									Sbsj sbsj = new Sbsj();
									sbsj.setNsrwjbm(nsrwjbm);
									sbsj.setJqbh(jqbh);
									sbsj.setZcpfs(Integer
											.parseInt((String) sbinfo
													.get("normalcnt")));
									sbsj.setTpfs(Integer
											.parseInt((String) sbinfo
													.get("backcnt")));
									sbsj.setFpfs(Integer
											.parseInt((String) sbinfo
													.get("deposecnt")));
									sbsj.setSskssj(startdate);
									sbsj.setSsjzsj(enddate);
									sbsj.setZcpzje(normalsum);
									sbsj.setTpzje(backsum);
									sbsj.setSbrq(nowtime);
									sbsj.setSblx(2);

									int result = sbsj.add();
									if (result != -1) {
										fieldname = "SID";
										where = " where NSRWJBM='" + nsrwjbm
												+ "' and JQBH='" + jqbh
												+ "' and SSKSSJ='" + startdate
												+ "'";
										table = "SKQ_SBSJ";
										sbsj.setTable(table);
										sid = sbsj
												.getFieldInt(fieldname, where);
										ArrayList sbzbxx = new ArrayList();
										if (normalsum1 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index1"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum1);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (normalsum2 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index2"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum2);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (normalsum3 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index3"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum3);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (normalsum4 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index4"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum4);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (normalsum5 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index5"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum5);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (normalsum6 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index6"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy +" and SMMC='其他' or SMMC='其它'";
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", normalsum6);
											hm.put("kplx", 1);

											sbzbxx.add(hm);
										}
										if (backsum1 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index1"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum1 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}
										if (backsum2 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index2"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum2 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}
										if (backsum3 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index3"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum3 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}
										if (backsum4 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index4"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum4 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}
										if (backsum5 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index5"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy;
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum5 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}
										if (backsum6 > 0) {
											int smsy = Integer
													.parseInt((String) sbinfo
															.get("index6"));
											fieldname = "SMBM";
											where = " where SMSY=" + smsy +" and SMMC='其他' or SMMC='其它'";
											table = "SKQ_PMSZ";
											sbsj.setTable(table);
											String smbm = sbsj.getField(
													fieldname, where);

											HashMap hm = new HashMap();
											hm.put("parentid", sid);
											hm.put("smbm", smbm);
											hm.put("je", backsum6 * -1);
											hm.put("kplx", 2);

											sbzbxx.add(hm);
										}

										if (sbzbxx != null && !sbzbxx.isEmpty()) {
											sbsj.addZb(sbzbxx);
										}

										// 从数据库读取申报数据
										sbsj = new Sbsj(sid);

										HashMap hmSb = new HashMap();
										hmSb.put("nsrxx", nsrxx);
										hmSb.put("sbsj", sbsj);

										request.setAttribute("hmSb", hmSb);
										return mapping
												.findForward("toJdsbList");
									} else {
										request.setAttribute("errorMsg",
												"申报数据保存失败！");
										return mapping.findForward("error");
									}
								}
							}
						} else {
							if (yhswjgbmStr.indexOf(swjgbm) >= 0) {
								sbinfo = (HashMap) cardInfo.get("EF04");
								if (sbinfo == null || sbinfo.isEmpty()) {
									request.setAttribute("errorMsg",
											"无申报，请先在机器上申报！");
									return mapping.findForward("error");
								} else {
									String startdate = (String) sbinfo
											.get("startdate");
									String enddate = (String) sbinfo
											.get("enddate");

									startdate = startdate.substring(0, 4) + '-'
											+ startdate.substring(4, 6) + '-'
											+ startdate.substring(6, 8);
									enddate = enddate.substring(0, 4) + '-'
											+ enddate.substring(4, 6) + '-'
											+ enddate.substring(6, 8);

									SimpleDateFormat sdf = new SimpleDateFormat(
											"yyyy-MM-dd");
									String nowtime = sdf.format(new Date());

									fieldname = "SID";
									where = " where SSKSSJ='" + startdate
											+ "' and SSJZSJ='" + enddate
											+ "' and JQBH='" + jqbh + "'";
									table = " SKQ_SBSJ";
									nsrxx.setTable(table);
									sid = nsrxx.getFieldInt(fieldname, where);

									if (sid != 0) {
										request.setAttribute("errorMsg",
												"申报数据已存在，不能重复申报！");
										return mapping.findForward("error");
									} else {
										// 保存申报数据
										double normalsum1 = Double
												.parseDouble((String) sbinfo
														.get("normalsum1"));
										normalsum1 = Double.parseDouble(dg
												.format(normalsum1 / 100));

										double normalsum2 = Double
												.parseDouble((String) sbinfo
														.get("normalsum2"));
										normalsum2 = Double.parseDouble(dg
												.format(normalsum2 / 100));

										double normalsum3 = Double
												.parseDouble((String) sbinfo
														.get("normalsum3"));
										normalsum3 = Double.parseDouble(dg
												.format(normalsum3 / 100));

										double normalsum4 = Double
												.parseDouble((String) sbinfo
														.get("normalsum4"));
										normalsum4 = Double.parseDouble(dg
												.format(normalsum4 / 100));

										double normalsum5 = Double
												.parseDouble((String) sbinfo
														.get("normalsum5"));
										normalsum5 = Double.parseDouble(dg
												.format(normalsum5 / 100));

										double normalsum6 = Double
												.parseDouble((String) sbinfo
														.get("normalsum6"));
										normalsum6 = Double.parseDouble(dg
												.format(normalsum6 / 100));

										double backsum1 = Double
												.parseDouble((String) sbinfo
														.get("backsum1"));
										backsum1 = Double.parseDouble(dg
												.format(backsum1 / 100));

										double backsum2 = Double
												.parseDouble((String) sbinfo
														.get("backsum2"));
										backsum2 = Double.parseDouble(dg
												.format(backsum2 / 100));

										double backsum3 = Double
												.parseDouble((String) sbinfo
														.get("backsum3"));
										backsum3 = Double.parseDouble(dg
												.format(backsum3 / 100));

										double backsum4 = Double
												.parseDouble((String) sbinfo
														.get("backsum4"));
										backsum4 = Double.parseDouble(dg
												.format(backsum4 / 100));

										double backsum5 = Double
												.parseDouble((String) sbinfo
														.get("backsum5"));
										backsum5 = Double.parseDouble(dg
												.format(backsum5 / 100));

										double backsum6 = Double
												.parseDouble((String) sbinfo
														.get("backsum6"));
										backsum6 = Double.parseDouble(dg
												.format(backsum6 / 100));

										double normalsum = Double
												.parseDouble(dg
														.format(normalsum1
																+ normalsum2
																+ normalsum3
																+ normalsum4
																+ normalsum5
																+ normalsum6));

										double backsum = Double.parseDouble(dg
												.format(backsum1 + backsum2
														+ backsum3 + backsum4
														+ backsum5 + backsum6));

										Sbsj sbsj = new Sbsj();
										sbsj.setNsrwjbm(nsrwjbm);
										sbsj.setJqbh(jqbh);
										sbsj.setZcpfs(Integer
												.parseInt((String) sbinfo
														.get("normalcnt")));
										sbsj.setTpfs(Integer
												.parseInt((String) sbinfo
														.get("backcnt")));
										sbsj.setFpfs(Integer
												.parseInt((String) sbinfo
														.get("deposecnt")));
										sbsj.setSskssj(startdate);
										sbsj.setSsjzsj(enddate);
										sbsj.setZcpzje(normalsum);
										sbsj.setTpzje(backsum);
										sbsj.setSbrq(nowtime);
										sbsj.setSblx(2);

										int result = sbsj.add();
										if (result != -1) {
											fieldname = "SID";
											where = " where NSRWJBM='"
													+ nsrwjbm + "' and JQBH='"
													+ jqbh + "' and SSKSSJ='"
													+ startdate + "'";
											table = "SKQ_SBSJ";
											sbsj.setTable(table);
											sid = sbsj.getFieldInt(fieldname,
													where);
											ArrayList sbzbxx = new ArrayList();
											if (normalsum1 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index1"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", normalsum1);
												hm.put("kplx", 1);

												sbzbxx.add(hm);
											}
											if (normalsum2 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index2"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", normalsum2);
												hm.put("kplx", 1);

												sbzbxx.add(hm);
											}
											if (normalsum3 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index3"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", normalsum3);
												hm.put("kplx", 1);

												sbzbxx.add(hm);
											}
											if (normalsum4 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index4"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", normalsum4);
												hm.put("kplx", 1);

												sbzbxx.add(hm);
											}
											if (normalsum5 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index5"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", normalsum5);
												hm.put("kplx", 1);

												sbzbxx.add(hm);
											}
											if (normalsum6 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index6"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", normalsum6);
												hm.put("kplx", 1);

												sbzbxx.add(hm);
											}
											if (backsum1 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index1"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", backsum1 * -1);
												hm.put("kplx", 2);

												sbzbxx.add(hm);
											}
											if (backsum2 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index2"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", backsum2 * -1);
												hm.put("kplx", 2);

												sbzbxx.add(hm);
											}
											if (backsum3 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index3"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", backsum3 * -1);
												hm.put("kplx", 2);

												sbzbxx.add(hm);
											}
											if (backsum4 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index4"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", backsum4 * -1);
												hm.put("kplx", 2);

												sbzbxx.add(hm);
											}
											if (backsum5 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index5"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", backsum5 * -1);
												hm.put("kplx", 2);

												sbzbxx.add(hm);
											}
											if (backsum6 > 0) {
												int smsy = Integer
														.parseInt((String) sbinfo
																.get("index6"));
												fieldname = "SMBM";
												where = " where SMSY=" + smsy;
												table = "SKQ_PMSZ";
												sbsj.setTable(table);
												String smbm = sbsj.getField(
														fieldname, where);

												HashMap hm = new HashMap();
												hm.put("parentid", sid);
												hm.put("smbm", smbm);
												hm.put("je", backsum6 * -1);
												hm.put("kplx", 2);

												sbzbxx.add(hm);
											}

											if (sbzbxx != null
													&& !sbzbxx.isEmpty()) {
												sbsj.addZb(sbzbxx);
											}

											sbsj = new Sbsj(sid);

											HashMap hmSb = new HashMap();
											hmSb.put("nsrxx", nsrxx);
											hmSb.put("sbsj", sbsj);

											// 更新变更申请表
											String sql = "select SID from SKQ_XEBG where NSRWJBM='"
													+ nsrwjbm
													+ "' and JQBH='"
													+ jqbh
													+ "' and CLBZ=1 and XZBS=0";
											fieldname = "SID";
											int sid1 = Query.getFieldInt(sql,
													fieldname);

											sql = "update SKQ_XEBG set XZBS=1 where SID="
													+ sid1;
											Query.updateField(sql);

											sql = "update SKQ_PMBG set XZBS=1 where SID="
													+ sid1;
											Query.updateField(sql);

											request.setAttribute("hmSb", hmSb);
											return mapping
													.findForward("toJdsbList");
										} else {
											request.setAttribute("errorMsg",
													"申报数据保存失败！");
											return mapping.findForward("error");
										}
									}
								}
							} else {
								request.setAttribute("errorMsg",
										"该纳税户不在您管辖范围内，不能进行阶段申报！");
								return mapping.findForward("error");
							}
						}
					}
				}
			}
		}

	}

	public ActionForward toJkhc(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toJkhc");
	}

	// 监控回传
	public ActionForward jkhcdk(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		System.out.println("jkhcdk");
		HashMap CARDINFO = (HashMap) session.getAttribute("UCARDINFO");
		System.out.println("CARDINFO===="+CARDINFO);
		if (CARDINFO == null || CARDINFO.isEmpty()) {
			session.setAttribute("errorMsg", "卡基本信息读取失败，请检查！");
			return mapping.findForward("error");
		} else {
			Query.updateField("delete from skq_jqszsm where smbm=''");
			String yhswjgbmStr = (String) session.getAttribute("yhswjgbmStr");
			HashMap kxx = (HashMap) CARDINFO.get("EF02");
			HashMap EF01 = (HashMap) CARDINFO.get("EF01");
			HashMap EF06 = (HashMap) CARDINFO.get("EF06");
			String jqbh = (String) EF06.get("JQBH");
			 String card_nsrwjbm=(String)kxx.get("NSRWJDM");
			Nsrxx nsrxx = new Nsrxx();
			String fieldname = "NSRWJBM";
			String where = " where JQBH='" + jqbh + "' and NSRWJBM like '%"+card_nsrwjbm+"%' and STATUS=1";
			String table = " SKQ_JQXX";
			nsrxx.setTable(table);
			String nsrwjbm = nsrxx.getField(fieldname, where);

			if (nsrwjbm == null || "".equals(nsrwjbm)) {
				request.setAttribute("errorMsg", "纳税户不存在！");
				return mapping.findForward("error");
			} else {
				nsrxx = new Nsrxx(nsrwjbm);

				int sid = nsrxx.getSid();
				if (sid == 0) {
					request.setAttribute("errorMsg", "纳税户不存在！");
					return mapping.findForward("error");
				} else {
					int status = nsrxx.getStatus();
					if (status != 1) {
						request.setAttribute("errorMsg", "纳税户已注销！");
						return mapping.findForward("error");
					} else {
						String swjgbm = nsrxx.getSwjgbm();
						String username = (String) session
								.getAttribute("username");
						if ("system".equals(username)) {
							HashMap EF02 = (HashMap) CARDINFO.get("EF02");
							HashMap EF04 = (HashMap) CARDINFO.get("EF04");

							String old_nsrwjbm = (String) EF02.get("NSRWJDM");
							String kpjzrq = (String) EF01.get("KPJZRQ");
							String skkh = (String) EF06.get("SKKH");

							Jqxx jqxx = new Jqxx(jqbh);

							HashMap hmJkhc = new HashMap();
							hmJkhc.put("old_nsrwjbm", old_nsrwjbm);
							hmJkhc.put("jqxx", jqxx);
							hmJkhc.put("nsrxx", nsrxx);

							hmJkhc.put("QYRQ", (String) EF02.get("QYRQ"));
							hmJkhc.put("YXRQ", (String) EF02.get("YXRQ"));
							hmJkhc.put("MXSBBZ", (String) EF01.get("MXSBBZ"));
							hmJkhc.put("JQLX", (String) EF02.get("JQLX"));
							hmJkhc.put("JQSL", (String) EF02.get("JQSL"));
							hmJkhc.put("LXBS", (String) EF02.get("LXBS"));
							hmJkhc.put("YYBB", (String) EF02.get("YYBB"));
							hmJkhc.put("FCI", (String) EF02.get("FCI"));
							hmJkhc.put("MAC", (String) EF04.get("mac"));
							hmJkhc.put("kpjzrq", kpjzrq);

							String[] smxkArr = new String[20];
							int i = 0;
							String str1 = "";
							ArrayList jqszsm = jqxx.getJqszsm();
							Iterator it1 = jqszsm.iterator();
							while (it1.hasNext()) {
								HashMap hm1 = (HashMap) it1.next();
								if(!((String)hm1.get("smbm")).equals("")){
									String smbm = (String) hm1.get("smbm");
									// 索引号
									String smsy = ((Integer) hm1.get("smsy"))
											.toString();
									if (smsy.length() < 2) {
										smsy = "0" + smsy;
									}
									// 税率
									double sl = (Double) hm1.get("sl");
									// 经营项目内容
									String smjc = (String) hm1.get("smjc");

									String str = smsy + "," + smbm + "," + (int) sl
											+ "," + smjc;
									smxkArr[i] = str;
									i++;
								}
								
							}

							// 下次开票截止日期
							fieldname = "SID";
							where = " where (XZZT=0 or XZZT is null) and JQBH='"
									+ jqbh + "'";
							table = " SKQ_SBSJ";
							jqxx.setTable(table);
							sid = jqxx.getFieldInt(fieldname, where);
							int sblx = 1;
							if (sid != 0) {
								Sbsj sbsj = new Sbsj(sid);
								sblx = sbsj.getSblx();
							}
							String xckpjzrq = "";
							if (sblx == 1) {
								xckpjzrq = Util.hqjkhcrq();
							} else {
								xckpjzrq = Util.getNDayAfterOneDate(Util
										.tobzrq(kpjzrq), 1);
							}
							System.out.println("smxkArr====" + smxkArr);
							hmJkhc.put("smxkArr", smxkArr);
							hmJkhc.put("xckpjzrq", xckpjzrq);

							request.setAttribute("hmJkhc", hmJkhc);
							return mapping.findForward("jkhchc");
						} else {
							if (yhswjgbmStr.indexOf(swjgbm) < 0) {
								request.setAttribute("errorMsg",
										"该纳税户不在您管辖范围内，不能进行监控回传！");
								return mapping.findForward("error");
							} else {
								HashMap EF02 = (HashMap) CARDINFO.get("EF02");
								HashMap EF04 = (HashMap) CARDINFO.get("EF04");

								String old_nsrwjbm = (String) EF02
										.get("NSRWJDM");
								String kpjzrq = (String) EF01.get("KPJZRQ");
								String skkh = (String) EF06.get("SKKH");

								Jqxx jqxx = new Jqxx(jqbh);

								HashMap hmJkhc = new HashMap();
								hmJkhc.put("old_nsrwjbm", old_nsrwjbm);
								hmJkhc.put("jqxx", jqxx);
								hmJkhc.put("nsrxx", nsrxx);

								hmJkhc.put("QYRQ", (String) EF02.get("QYRQ"));
								hmJkhc.put("YXRQ", (String) EF02.get("YXRQ"));
								hmJkhc.put("MXSBBZ", (String) EF01
										.get("MXSBBZ"));
								hmJkhc.put("JQLX", (String) EF02.get("JQLX"));
								hmJkhc.put("JQSL", (String) EF02.get("JQSL"));
								hmJkhc.put("LXBS", (String) EF02.get("LXBS"));
								hmJkhc.put("YYBB", (String) EF02.get("YYBB"));
								hmJkhc.put("FCI", (String) EF02.get("FCI"));
								hmJkhc.put("MAC", (String) EF04.get("mac"));
								hmJkhc.put("kpjzrq", kpjzrq);

								String[] smxkArr = new String[20];
								int i = 0;
								String str1 = "";
								ArrayList jqszsm = jqxx.getJqszsm();
								Iterator it1 = jqszsm.iterator();
								while (it1.hasNext()) {
									HashMap hm1 = (HashMap) it1.next();
									if(!((String)hm1.get("smbm")).equals("")){
										String smbm = (String) hm1.get("smbm");
										// 索引号
										String smsy = ((Integer) hm1.get("smsy"))
												.toString();
										if (smsy.length() < 2) {
											smsy = "0" + smsy;
										}
										// 税率
										double sl = (Double) hm1.get("sl");
										// 经营项目内容
										String smjc = (String) hm1.get("smjc");

										String str = smsy + "," + smbm + "," + (int) sl
												+ "," + smjc;
										smxkArr[i] = str;
										i++;
									}
									
								}
								System.out.println("smxkArr====" + smxkArr);
								hmJkhc.put("smxkArr", smxkArr);
								fieldname = "SID";
								where = " where (XZZT=0 or XZZT is null) and JQBH='"
										+ jqbh + "'";
								table = " SKQ_SBSJ";
								jqxx.setTable(table);
								sid = jqxx.getFieldInt(fieldname, where);
								int sblx = 1;
								if (sid != 0) {
									Sbsj sbsj = new Sbsj(sid);
									sblx = sbsj.getSblx();
								}
								String xckpjzrq = "";
								if (sblx == 1) {
									xckpjzrq = Util.hqjkhcrq();
								} else {
									xckpjzrq = Util.getNDayAfterOneDate(Util
											.tobzrq(kpjzrq), 1);
								}
								hmJkhc.put("xckpjzrq", xckpjzrq);
								request.setAttribute("hmJkhc", hmJkhc);
								Logger log=Logger.getLogger(SbsjAction.class);
								log.info(hmJkhc);
								return mapping.findForward("jkhchc");
							//	return null;
							}
						}

					}
				}
			}
		}
	}
	 public ActionForward updateKpxe(ActionMapping mapping, ActionForm form,
	 HttpServletRequest request, HttpServletResponse response) {

			String kpjzrq = request.getParameter("kpjzrq");
			String jqbh = request.getParameter("jqbh");
			double dzkpxe = Double.parseDouble(request
					.getParameter("dzkpxe"));
			double yljkpxe = Double.parseDouble(request
					.getParameter("yljkpxe"));
			double yljtpxe = Double.parseDouble(request
					.getParameter("yljtpxe"));
			String mac = request.getParameter("mac");
			kpjzrq = Util.tobzrq(kpjzrq);

			Jqxx jqxx = new Jqxx(jqbh);
			jqxx.setKpjzrq(kpjzrq);
			jqxx.setDzkpxe(dzkpxe);
			jqxx.setYljkpxe(yljkpxe);
			jqxx.setYljtpxe(yljtpxe);
			
//			jqxx.update(jqbh);
			
			String sql = "update SKQ_JQXX set KPJZRQ='"+kpjzrq+"',DZKPXE="+dzkpxe+",YLJKPXE="+yljkpxe+",YLJTPXE="+yljtpxe+" where JQBH='"+jqbh+"'  and STATUS=1";
			log.info("监控回传更新sql："+sql);
			Query.updateField(sql);
			
			/*String sql = "select NSRWJBM  from SKQ_JQXX where JQBH='"
					+ jqbh + "' and STATUS=1";
			String fieldname = "NSRWJBM";
			String nsrwjbm = Query.getField(sql, fieldname);

			sql = "select SID from SKQ_XEBG where NSRWJBM='" + nsrwjbm
					+ "' and JQBH='" + jqbh + "' and CLBZ=1 and XZBS=0";
			fieldname = "SID";
			int sid = Query.getFieldInt(sql, fieldname);

			sql = "update SKQ_XEBG set XZBS=1 where SID=" + sid;
			Query.updateField(sql);

			sql = "select SID from SKQ_PMBG where NSRWJBM='" + nsrwjbm
					+ "' and JQBH='" + jqbh + "' and CLBZ=1 and XZBS=0";
			fieldname = "SID";
			sid = Query.getFieldInt(sql, fieldname);
			sql = "update SKQ_PMBG set XZBS=1 where SID=" + sid;
			Query.updateField(sql);*/

			String fieldname = "SID";
			String where = " where (XZZT=0 or XZZT is null) and JQBH='"
					+ jqbh + "'";
			String table = " SKQ_SBSJ";
			jqxx.setTable(table);
			int sid = jqxx.getFieldInt(fieldname, where);

			if (sid != 0) {
				SimpleDateFormat sdf = new SimpleDateFormat(
						"yyyy-MM-dd");
				String nowtime = sdf.format(new Date());
				Sbsj sbsj = new Sbsj(sid);
				sbsj.setKpjzsj(kpjzrq);
				sbsj.setDzkpxe(dzkpxe);
				sbsj.setYljkpxe(yljkpxe);
				sbsj.setYljtpxe(yljtpxe);
				sbsj.setCjrq(nowtime);
				sbsj.setXzzt(1);
				sbsj.setXzrq(nowtime);
				sbsj.setMac(mac);
				sbsj.updateJksj();
			}
    return null;
	 }
}

// public ActionForward jkhcupdateKpxe(ActionMapping mapping, ActionForm form,
// HttpServletRequest request, HttpServletResponse response) {
// // TODO Auto-generated method stub
// return null;
// }
