/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package jsdt.action.invoice;

import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jsdt.model.Fpj;
import jsdt.model.Fpjmx;
import jsdt.model.Jqxx;
import jsdt.model.Nsrxx;
import jsdt.tools.Query;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

/**
 * MyEclipse Struts Creation date: 03-11-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="op" validate="true"
 */
public class FpServiceAction extends DispatchAction {
	Logger log=Logger.getLogger(FpServiceAction.class);
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward toImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("invoice");
	}

	// 读卡成功后进入页面，然后再进入发票展示页面
	public ActionForward info(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		response.setContentType("text/html; charset=utf-8");
		request.setCharacterEncoding("utf-8");
		ActionForward forward = null;
		HttpSession session = request.getSession(true);
		HashMap CARDINFO = (HashMap) session.getAttribute("UCARDINFO");
		String yhswjgbmStr = (String) session.getAttribute("yhswjgbmStr");
		System.out.println("CARDINFO===" + CARDINFO);
		if (CARDINFO == null || CARDINFO.isEmpty()) {
			request.setAttribute("errorMsg", "基础信息读取失败！");
			forward = mapping.findForward("error");
		} else {
			HashMap kxx = (HashMap) CARDINFO.get("EF02");
			HashMap EF06 = (HashMap) CARDINFO.get("EF06");
			String jqbh = (String) EF06.get("JQBH");
			ArrayList cardInvoice = (ArrayList) CARDINFO.get("EF05");
            String card_nsrwjbm=(String)kxx.get("NSRWJDM");
			Nsrxx nsrxx = new Nsrxx();
			String where1=" where JQBH='" + jqbh + "'  and STATUS=1";
			String table1 = " SKQ_JQXX";
			nsrxx.setTable(table1);
			String nsrwjbm1 = nsrxx.getField("NSRWJBM", where1);
			String fieldname = "NSRWJBM";
			String where = " where JQBH='" + jqbh + "' AND NSRWJBM like '%"+card_nsrwjbm+"%' and STATUS=1";
			String table = " SKQ_JQXX";
			nsrxx.setTable(table);
			String nsrwjbm = nsrxx.getField(fieldname, where);
			if (nsrwjbm == null || "".equals(nsrwjbm)) {
				request.setAttribute("errorMsg", "纳税户不存在！用户卡中纳税户微机编码为："+card_nsrwjbm+",后台纳税人微机编码为："+nsrwjbm1);
				forward = mapping.findForward("error");
			} else {
				nsrxx = new Nsrxx(nsrwjbm);
				System.out.println("nsrwjbm======" + nsrwjbm);
				int sid = nsrxx.getSid();
				if (sid == 0) {
					request.setAttribute("errorMsg", "纳税户不存在！用户卡中纳税户微机编码为："+card_nsrwjbm+",后台纳税人微机编码为："+nsrwjbm1);
					forward = mapping.findForward("error");
				} else {
					int status = nsrxx.getStatus();
					if (status != 1) {
						request.setAttribute("errorMsg", "纳税户已注销！");
						forward = mapping.findForward("error");
					} else {
						String username = (String) session
								.getAttribute("username");
						if ("system".equals(username)) {
							session.removeAttribute("cardInvoice");
							session.setAttribute("cardInvoice", cardInvoice);
							RequestDispatcher dispatcher = request
									.getRequestDispatcher("fpService.do?op=fpList&jqbh="
											+ jqbh + "&nsrwjbm=" + nsrwjbm);
							dispatcher.forward(request, response);
							forward = null;
						} else {
							String swjgbm = nsrxx.getSwjgbm();
							if (yhswjgbmStr.indexOf(swjgbm) >= 0) {
								session.setAttribute("cardInvoice", cardInvoice);
								RequestDispatcher dispatcher = request
										.getRequestDispatcher("fpService.do?op=fpList&jqbh="
												+ jqbh + "&nsrwjbm=" + nsrwjbm);
								dispatcher.forward(request, response);
							} else {
								request.setAttribute("errorMsg", "该纳税户所属税务机关为："
										+ nsrxx.getSwjgmc() + ",不在您管辖范围内");
								forward = mapping.findForward("error");
							}
						}
					}
				}
			}
		}
		return forward;
	}
	// 发票展示页面网络买票
		public ActionForward fpListWlkp(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			String nsrwjbm = request.getParameter("nsrwjbm");
			Nsrxx nsrxx = new Nsrxx(nsrwjbm);
			Fpjmx fpjmx = new Fpjmx();
			ArrayList alFp = fpjmx.selectFpxfWLKP(nsrwjbm);
			request.setAttribute("nsrxx", nsrxx);
			request.setAttribute("alFp", alFp);
			return mapping.findForward("toFpListWlkp");
		}
	// 发票展示页面
	public ActionForward fpList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String jqbh = request.getParameter("jqbh");
		String nsrwjbm = request.getParameter("nsrwjbm");
		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		Jqxx jqxx = new Jqxx(jqbh);
		String fpbm = jqxx.getFpbm();
		Fpjmx fpjmx = new Fpjmx();
		ArrayList alFp = fpjmx.selectFpxf(nsrwjbm, fpbm);
		request.setAttribute("jqxx", jqxx);
		request.setAttribute("nsrxx", nsrxx);
		request.setAttribute("alFp", alFp);
		return mapping.findForward("toFpList");
	}

	// to发票写卡
	public ActionForward fpxk(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionForward forward = null;
		String nsrwjbm = request.getParameter("nsrwjbm");
		String jqbh = request.getParameter("jqbh");
		String fpqshInfoStr = request.getParameter("fpqshInfoStr");

		if (fpqshInfoStr == null || "".equals(fpqshInfoStr)) {
			request.setAttribute("errorMsg", "请选择发票！");
			forward = mapping.findForward("error");
		} else {
			String[] fpqshInfoArr = fpqshInfoStr.split(",");
			int fpqsh = 0;
			String fpdm = "";
			String strSql = "";
			for (int i = 0; i < fpqshInfoArr.length; i++) {
				String str = fpqshInfoArr[i];
				String[] strArr = str.split("\\|");
				fpqsh = Integer.parseInt(strArr[0]);
				fpdm = strArr[1];
				if ("".equals(strSql)) {
					strSql = " and ((FPQSH=" + fpqsh + " and FPDM='" + fpdm
							+ "')";
				} else {
					strSql = strSql + " or (FPQSH=" + fpqsh + " and FPDM='"
							+ fpdm + "')";
				}
			}
			strSql = strSql + ")";

			Fpjmx fpjmx = new Fpjmx();
			ArrayList alFp = fpjmx.selectCheckedFpjmx(strSql);
			if (alFp == null || alFp.isEmpty()) {
				request.setAttribute("errorMsg", "发票选择错误！");
				forward = mapping.findForward("error");
			} else {
				Nsrxx nsrxx = new Nsrxx(nsrwjbm);
				Jqxx jqxx = new Jqxx(jqbh);
				request.setAttribute("nsrxx", nsrxx);
				request.setAttribute("jqxx", jqxx);
				request.setAttribute("alFp", alFp);
				for(int i=0;i<alFp.size();i++){
					Fpjmx fpjmx1=(Fpjmx)alFp.get(i);
					log.info("发票购买明细："+fpjmx1.toString(fpjmx1));
				}
				request.setAttribute("fpqshInfoStr", fpqshInfoStr);
				forward = mapping.findForward("toInvoiceXk");
			}
		}
		return forward;
	}

	public ActionForward updateXkbz(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String fpqshInfoStr = request.getParameter("fpqshInfoStr");
		String[] fpqshInfoArr = fpqshInfoStr.split(",");
		int fpqsh = 0;
		String fpdm = "";
		String strSql = "";
		for (int i = 0; i < fpqshInfoArr.length; i++) {
			String str = fpqshInfoArr[i];
			String[] strArr = str.split("\\|");
			fpqsh = Integer.parseInt(strArr[0]);
			fpdm = strArr[1];
			if ("".equals(strSql)) {
				strSql = " and ((FPQSH=" + fpqsh + " and FPDM='" + fpdm + "')";
			} else {
				strSql = strSql + " or (FPQSH=" + fpqsh + " and FPDM='" + fpdm
						+ "')";
			}
		}
		strSql = strSql + ")";

		Fpjmx fpjmx = new Fpjmx();
		ArrayList alFp = fpjmx.selectCheckedFpjmx(strSql);

		 int sid=0;
		int result = fpjmx.updateXkbz(alFp, sid);
		request.setAttribute("successMsg", "写卡成功！");
		// response.sendRedirect("/javaskweb/fpService.do?op=info");
		 RequestDispatcher dispatcher = request
		 .getRequestDispatcher("/javaskweb/fpService.do?op=info");
		 dispatcher.forward(request, response);
		return null;
	}
	 //网络买票
		public ActionForward addWlkp(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			String nsrwjbm = request.getParameter("nsrwjbm");
			Nsrxx nsrxx = new Nsrxx(nsrwjbm);
			Fpjmx fpjmx = new Fpjmx();
			String fpjdm = fpjmx.getFpjdm();
			request.setAttribute("fpjdm", fpjdm);
			request.setAttribute("nsrxx", nsrxx);
			return mapping.findForward("toInvoiceAddWlkp");
		}
		public ActionForward deleteWlkp(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
			String fpdm = request.getParameter("fpdm");
			int fpqsh = Integer.parseInt(request.getParameter("fpqsh"));
			int fpjzh = Integer.parseInt(request.getParameter("fpjzh"));
			String nsrwjbm = request.getParameter("nsrwjbm");
			String jqbh = request.getParameter("jqbh");
			String sql = "delete from SKQ_FPJMX where NSRWJBM='" + nsrwjbm
					+ "' and FPDM='" + fpdm + "' and FPQSH=" + fpqsh
					+ " and FPJZH=" + fpjzh;
			int result = Query.updateField(sql);
			if (result != -1 ) {
				RequestDispatcher dispatcher = request
				.getRequestDispatcher("fpService.do?op=infoWLKP&nsrwjbm=" + nsrwjbm);
		dispatcher.forward(request, response);
		return null;
			} else {
				request.setAttribute("errorMsg", "发票删除失败！");
				return mapping.findForward("error");
			}
		}
		// 直接根据纳税户微机编码进入
		public ActionForward infoWLKP(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws Exception {
			response.setContentType("text/html; charset=utf-8");
			request.setCharacterEncoding("utf-8");
			ActionForward forward = null;
			
			HttpSession session = request.getSession(true);
			String yhswjgbmStr = (String) session.getAttribute("yhswjgbmStr");
			String nsrwjbmStr=request.getParameter("nsrwjbm");
			
			Nsrxx nsrxx = new Nsrxx();
			String fieldname = "NSRWJBM";
			String where = " where  NSRWJBM ='"+nsrwjbmStr+"' and STATUS=1";
			nsrxx.setTable("SKQ_NSRXX");
			String nsrwjbm = nsrxx.getField(fieldname, where);
			if (nsrwjbm == null || "".equals(nsrwjbm)) {
				request.setAttribute("errorMsg", "纳税户不存在！");
				forward = mapping.findForward("error");
			} else {
				nsrxx = new Nsrxx(nsrwjbm);
				System.out.println("nsrwjbm======" + nsrwjbm);
				int sid = nsrxx.getSid();
				if (sid == 0) {
					request.setAttribute("errorMsg", "纳税户不存在！");
					forward = mapping.findForward("error");
				} else {
					int status = nsrxx.getStatus();
					 
					if (status != 1) {
						request.setAttribute("errorMsg", "纳税户已注销！");
						forward = mapping.findForward("error");
					} else {
						String username = (String) session
								.getAttribute("username");
						if ("system".equals(username)) {
							
							RequestDispatcher dispatcher = request
									.getRequestDispatcher("fpService.do?op=fpListWlkp&nsrwjbm=" + nsrwjbm);
							dispatcher.forward(request, response);
							forward = null;
						} else {
							String swjgbm = nsrxx.getSwjgbm();
							if (yhswjgbmStr.indexOf(swjgbm) >= 0) {
							 
								RequestDispatcher dispatcher = request
										.getRequestDispatcher("fpService.do?op=fpListWlkp&nsrwjbm=" + nsrwjbm);
								dispatcher.forward(request, response);
							} else {
								request.setAttribute("errorMsg", "该纳税户所属税务机关为："
										+ nsrxx.getSwjgmc() + ",不在您管辖范围内");
								forward = mapping.findForward("error");
							}
						}
					}
				}
			}
			return forward;
		}
	public ActionForward add(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		String jqbh = request.getParameter("jqbh");
		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		Jqxx jqxx = new Jqxx(jqbh);
		Fpjmx fpjmx = new Fpjmx();
		String fpjdm = fpjmx.getFpjdm();
		request.setAttribute("fpjdm", fpjdm);
		request.setAttribute("jqxx", jqxx);
		request.setAttribute("nsrxx", nsrxx);
		return mapping.findForward("toInvoiceAdd");
	}

	// 发票删除
	public ActionForward delete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String fpdm = request.getParameter("fpdm");
		int fpqsh = Integer.parseInt(request.getParameter("fpqsh"));
		int fpjzh = Integer.parseInt(request.getParameter("fpjzh"));
		String nsrwjbm = request.getParameter("nsrwjbm");
		String jqbh = request.getParameter("jqbh");
		String sql = "delete from SKQ_FPJMX where NSRWJBM='" + nsrwjbm
				+ "' and FPDM='" + fpdm + "' and FPQSH=" + fpqsh
				+ " and FPJZH=" + fpjzh;
		int result = Query.updateField(sql);
		sql = "delete from SKQ_FPJ where NSRWJBM='" + nsrwjbm + "' and FPDM='"
				+ fpdm + "' and FPQSH=" + fpqsh + " and FPJZH=" + fpjzh;
		int result2 = Query.updateField(sql);
		if (result != -1 && result2 != -1) {
			return mapping.findForward("success");
		} else {
			request.setAttribute("errorMsg", "发票删除失败！");
			return mapping.findForward("error");
		}
	}

	public ActionForward toFpbl(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toFpbl");
	}

	// 发票补领list页面
	public ActionForward bllist(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		HttpSession session = request.getSession();
		System.out.println("nsrwjbm==" + nsrwjbm);
		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		int sid = nsrxx.getSid();
		if (sid == 0) {
			request.setAttribute("errorMsg", "纳税户不存在！");
			return mapping.findForward("error");
		} else {
			int status = nsrxx.getStatus();
			if (status != 1) {
				request.setAttribute("errorMsg", "纳税户已注销！");
				return mapping.findForward("error");
			} else {
				String username = (String) session.getAttribute("username");
				if ("system".equals(username)) {
					Fpjmx fpjmx = new Fpjmx();
					ArrayList alFpbl = fpjmx.selectBlFpjmx(nsrwjbm);

					request.setAttribute("alFpbl", alFpbl);
					request.setAttribute("nsrxx", nsrxx);
					return mapping.findForward("toFpblList");
				} else {
					String yhswjgbmStr = (String) session
							.getAttribute("yhswjgbmStr");
					String swjgbm = nsrxx.getSwjgbm();
					if (yhswjgbmStr.indexOf(swjgbm) >= 0) {
						Fpjmx fpjmx = new Fpjmx();
						ArrayList alFpbl = fpjmx.selectBlFpjmx(nsrwjbm);

						request.setAttribute("alFpbl", alFpbl);
						request.setAttribute("nsrxx", nsrxx);
						return mapping.findForward("toFpblList");
					} else {
						request.setAttribute("errorMsg",
								"该纳税户所属税务机关为：" + nsrxx.getSwjgmc()
										+ ",不在您管辖范围内");
						return mapping.findForward("error");
					}
				}
			}
		}
	}

	// 补领添加
	public ActionForward bladd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		request.setAttribute("nsrwjbm", nsrwjbm);
		return mapping.findForward("toFpblAdd");
	}

	// 补领添加页面
	public ActionForward addaction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String nsrwjbm = request.getParameter("nsrwjbm");
		String fpdm = request.getParameter("fpdm");
		int fpdw = Integer.parseInt(request.getParameter("fpdw"));
		int fpqsh = (Integer.valueOf(request.getParameter("fpqsh"))).intValue();
		int fpjzh = (Integer.valueOf(request.getParameter("fpjzh"))).intValue();
		Fpjmx fpjmx = new Fpjmx();
		String table = "SKQ_FPJMX";
		String fieldname = "SID";
		String where = " where NSRWJBM='"
				+ nsrwjbm
				+ "' and FPDM='"
				+ fpdm
				+ "' and FPLGZT=1 and (JQBH!='' or JQBH !=null or JQBH!=' ') and (FPQSH<="
				+ fpqsh + " and FPJZH>=" + fpqsh + " and FPQSH<=" + fpjzh
				+ " and FPJZH>=" + fpjzh + ")";
		fpjmx.setTable(table);
		int sid = fpjmx.getFieldInt(fieldname, where);
		System.out.println("sid==" + sid);
		System.out.println("where==" + where);
		if (sid == 0) {
			request.setAttribute("errorMsg", "该卷发票无领购过,或未下载，请检查输入的发票代码、号码");
			return mapping.findForward("error");
		} else {
			fieldname = "SID";
			where = " where NSRWJBM='" + nsrwjbm + "' and FPDM='" + fpdm
					+ "' and FPLGZT=2 and FPXFZT=0 and ((" + fpqsh
					+ ">=FPQSH and " + fpqsh + "<=FPJZH) or(" + fpjzh
					+ ">=FPQSH and " + fpjzh + "<=FPJZH) or (" + fpqsh
					+ "<=FPQSH and " + fpjzh + ">=FPJZH))";

			fpjmx.setTable(table);
			int sid1 = fpjmx.getFieldInt(fieldname, where);
			if (sid1 != 0) {
				request.setAttribute("errorMsg", "该卷发票无领购过,或未下载，请检查输入的发票代码、号码");
				return mapping.findForward("error");
			} else {
				fieldname = "FPBM";
				where = " where SID=" + sid;
				fpjmx.setTable(table);
				String fpbm = fpjmx.getField(fieldname, where);
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

				fpjmx.setFpbm(fpbm);
				fpjmx.setFpdm(fpdm);
				fpjmx.setFpqsh(fpqsh);
				fpjmx.setFpjzh(fpjzh);
				fpjmx.setNsrwjbm(nsrwjbm);
				// fpjmx.setJqbh("");
				fpjmx.setFpdw(fpdw);
				fpjmx.setFplgrq(sdf.format(new Date()));

				int result = fpjmx.add();
				if (result == -1) {
					request.setAttribute("errorMsg", "发票补领保存失败");
					return mapping.findForward("error");
				} else {
					String sql = "update SKQ_FPJMX set FPXFZT=1 where SID="
							+ sid;
					Query.updateField(sql);

					sql = "delete from SKQ_FPKJ where FPHM>=" + fpqsh
							+ " and FPHM<=" + fpjzh;
					Query.updateField(sql);
					RequestDispatcher dispatcher = request
							.getRequestDispatcher("fpService.do?op=bllist&nsrwjbm="
									+ nsrwjbm);
					dispatcher.forward(request, response);
				}
			}
		}
		return null;
	}

	public ActionForward addAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// System.out.println("111111111");
		ActionForward forward = null;

		String fpdm = request.getParameter("fpdm");
		int fpqsh = Integer.parseInt(request.getParameter("fpqsh"));
		int fpjzh = Integer.parseInt(request.getParameter("fpjzh"));
		int fpdw = Integer.parseInt(request.getParameter("fpdw"));
		int fpsl = Integer.parseInt(request.getParameter("fpsl"));
		String nsrwjbm = request.getParameter("nsrwjbm");
		String jqbh = request.getParameter("jqbh");
		String fpbm = request.getParameter("fpbm");
		String fpjy = request.getParameter("fpjy1");
		Fpj fpj = new Fpj();
		String table = "SKQ_FPJ";
		String fieldname = "SID";
		String where = " where (FPQSH >=" + fpqsh + " and FPQSH<=" + fpjzh
				+ " and FPDM='" + fpdm + "') or (FPJZH >=" + fpqsh
				+ " and FPJZH<=" + fpjzh + " and FPDM='" + fpdm + "')";
		fpj.setTable(table);
		int sid = fpj.getFieldInt(fieldname, where);
		if (fpjy.trim().equals("1")) {
			if (sid != 0) {
				request.setAttribute("errorMsg", "发票已领购，请重新输入！");
				forward = mapping.findForward("error2");
			} else {
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

				HashMap hm = new HashMap();
				hm.put("fpbm", fpbm);
				hm.put("fpdm", fpdm);
				hm.put("fpqsh", fpqsh);
				hm.put("fpjzh", fpjzh);
				hm.put("fpdw", fpdw);
				hm.put("nsrwjbm", nsrwjbm);
				hm.put("jqbh", jqbh);
				hm.put("fplgrq", sdf.format(new Date()));

				ArrayList al = new ArrayList();
				al.add(hm);

				int result = fpj.add(al);
				if (result != -1) {
					forward = mapping.findForward("success");
				} else {
					request.setAttribute("errorMsg", "发票添加失败！");
					forward = mapping.findForward("error");
				}
			}
		} else {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");

			HashMap hm = new HashMap();
			hm.put("fpbm", fpbm);
			hm.put("fpdm", fpdm);
			hm.put("fpqsh", fpqsh);
			hm.put("fpjzh", fpjzh);
			hm.put("fpdw", fpdw);
			hm.put("nsrwjbm", nsrwjbm);
			hm.put("jqbh", jqbh);
			hm.put("fplgrq", sdf.format(new Date()));

			ArrayList al = new ArrayList();
			al.add(hm);

			int result = fpj.add(al);
			if (result != -1) {
				forward = mapping.findForward("success");
			} else {
				request.setAttribute("errorMsg", "发票添加失败！");
				forward = mapping.findForward("error");
			}
		}
		return forward;
	}
	public ActionForward addActionWlkp(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionForward forward = null;
		String fpdm = request.getParameter("fpdm");
		String fpbm=request.getParameter("fppz");
		int fpqsh = Integer.parseInt(request.getParameter("fpqsh"));
		int fpjzh = Integer.parseInt(request.getParameter("fpjzh"));
		int fpdw = Integer.parseInt(request.getParameter("fpdw"));
		int fpsl = Integer.parseInt(request.getParameter("fpsl"));
		String nsrwjbm = request.getParameter("nsrwjbm");
		String fpjy = request.getParameter("fpjy1");
		Fpj fpj = new Fpj();
		String table = "SKQ_FPJ";
		String fieldname = "SID";
		String where = " where (FPQSH >=" + fpqsh + " and FPQSH<=" + fpjzh
				+ " and FPDM='" + fpdm + "') or (FPJZH >=" + fpqsh
				+ " and FPJZH<=" + fpjzh + " and FPDM='" + fpdm + "')";
		fpj.setTable(table);
		System.out.println(where);
		int sid = fpj.getFieldInt(fieldname, where);
		if (fpjy.trim().equals("1")) {
			if (sid != 0) {
				request.setAttribute("errorMsg", "发票已领购，请重新输入！");
				forward = mapping.findForward("error2");
			} else {
				SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

				HashMap hm = new HashMap();
				hm.put("fpbm",fpbm);
				hm.put("fpdm", fpdm);
				hm.put("fpqsh", fpqsh);
				hm.put("fpjzh", fpjzh);
				hm.put("fpdw", fpdw);
				hm.put("nsrwjbm", nsrwjbm);
				hm.put("jqbh", "");
				hm.put("fplgrq", sdf.format(new Date()));
				ArrayList al = new ArrayList();
				al.add(hm);
				int result = fpj.addWlkp(al);
				if (result != -1) {
					forward = mapping.findForward("success");
				} else {
					request.setAttribute("errorMsg", "发票添加失败！");
					forward = mapping.findForward("error");
				}
			}
		} else {
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

			HashMap hm = new HashMap();
			hm.put("fpbm",fpbm);
			hm.put("fpdm", fpdm);
			hm.put("fpqsh", fpqsh);
			hm.put("fpjzh", fpjzh);
			hm.put("fpdw", fpdw);
			hm.put("nsrwjbm", nsrwjbm);
			hm.put("jqbh", "");
			hm.put("fplgrq", sdf.format(new Date()));

			ArrayList al = new ArrayList();
			al.add(hm);

			int result = fpj.add(al);
			if (result != -1) {
				forward = mapping.findForward("success");
			} else {
				request.setAttribute("errorMsg", "发票添加失败！");
				forward = mapping.findForward("error");
			}
		}
		return forward;
	}
	
}