/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package jsdt.action.system;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import jsdt.model.Fp;
import jsdt.model.Hy;
import jsdt.model.Hymx;
import jsdt.model.Jcxx;
import jsdt.model.Jqxh;
import jsdt.model.Role;
import jsdt.model.Swjg;
import jsdt.model.Szsm;
import jsdt.model.User;
import jsdt.model.Zclx;
import jsdt.tools.Query;
import jsdt.tools.Util;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

/**
 * MyEclipse Struts Creation date: 03-12-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="op" validate="true"
 */
public class SystemAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	// 发票管理页面
	public ActionForward toFpList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		Fp fp = new Fp();
		ArrayList alFp = fp.selectAll();
		request.removeAttribute("alFp");
		request.setAttribute("alFp", alFp);
		// System.out.println("alFP=" + alFp.size());
		return mapping.findForward("toFpList");
	}

	public ActionForward toFpAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("toFpAdd");
	}

	// 发票新增
	public ActionForward fpAddAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String fpbm = request.getParameter("fpbm");
		String fpmc = request.getParameter("fpmc");
		int status = Integer.valueOf(request.getParameter("status"));

		Fp fp = new Fp();
		fp.setFpbm(fpbm);
		fp.setFpmc(fpmc);
		fp.setStatus(status);

		int result = fp.add();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toFpList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "新增失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	// 发票修改
	public ActionForward toFpEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub\
		String fpbm = request.getParameter("fpbm");

		Fp fp = new Fp(fpbm);

		request.setAttribute("fp", fp);
		return mapping.findForward("toFpEdit");
	}

	// 发票修改页面
	public ActionForward fpEditAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		// TODO Auto-generated method stub
		response.setContentType("text/html; charset=utf-8");
		request.setCharacterEncoding("utf-8");
		String fpbm = request.getParameter("fpbm");
		String fpmc = request.getParameter("fpmc");
		int status = Integer.valueOf(request.getParameter("status"));

		Fp fp = new Fp(fpbm);
		fp.setFpmc(fpmc);
		fp.setStatus(status);

		int result = fp.update();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toFpList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "更新失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	// 发票删除
	public ActionForward fpDelete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {

		int sid = Integer.valueOf(request.getParameter("sid"));

		Fp fp = new Fp();

		String table = "SKQ_FP";
		fp.setTable(table);
		int result = fp.deleteById(sid);
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toFpList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "删除失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	// to品目设置
	public ActionForward toPmList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Szsm szsm = new Szsm();
		ArrayList alSzsm = szsm.selectAll();
		Fp fp = new Fp();
		ArrayList alFp = fp.selectQy();
		request.setAttribute("alSzsm", alSzsm);
		request.setAttribute("alFp", alFp);
		return mapping.findForward("toPmList");
	}

	// 品目保存
	public ActionForward pmEditAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		Szsm szsm = new Szsm();
		ArrayList alSzsm = szsm.selectAll();
		Iterator it = alSzsm.iterator();
		while (it.hasNext()) {
			Szsm szsm1 = (Szsm) it.next();
			// System.out.println("smbm=="+szsm1.getSmbm());
			String fpbm = (String) request.getParameter("fpbm_"
					+ szsm1.getSmbm());
			int hdkpbl = Integer.valueOf(request.getParameter("hdkpbl_"
					+ szsm1.getSmbm()));
			double czkpxe = Double.valueOf(request.getParameter("czkpxe_"
					+ szsm1.getSmbm()));
			int cezs = Integer.valueOf(request.getParameter("cezs_"
					+ szsm1.getSmbm()));
			int status = Integer.valueOf(request.getParameter("status_"
					+ szsm1.getSmbm()));
			String smbm = szsm1.getSmbm();
			szsm1.setFpbm(fpbm);
			szsm1.setHdkpbl(hdkpbl);
			szsm1.setCzkpxe(czkpxe);
			szsm1.setCezs(cezs);
			szsm1.setStatus(status);
			String sql = "update SKQ_NSRSZSM set STATUS=" + status
					+ " where SMBM='" + smbm + "'";
			Query.updateField(sql);
		}
		int result = szsm.updateAll(alSzsm);
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toPmList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "保存失败！");
			return mapping.findForward("error");
		}
		return null;

	}

	public ActionForward toPmAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Fp fp = new Fp();
		ArrayList alFp = fp.selectQy();
		request.setAttribute("alFp", alFp);
		return mapping.findForward("toPmAdd");
	}

	public ActionForward pmAddAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		Integer pmsy=Integer.parseInt((String)request.getParameter("pmsy"));
		String smbm = (String) request.getParameter("smbm");
		String smmc = (String) request.getParameter("smmc");
		String smjc = (String) request.getParameter("smjc");
		double sl = Double.parseDouble(request.getParameter("sl"));
		String fpbm = (String) request.getParameter("fpbm");
		int hdkpbl = 10000;
		double czkpxe =10000;
		int cezs = 1;
		int status = Integer.parseInt(request.getParameter("status"));
		for (int i = smbm.length(); i < 8; i++) {
			smbm = "0" + smbm;
		}
		Szsm szsm = new Szsm();
		 szsm.setSmsy(pmsy);
		szsm.setSmbm(smbm);
		szsm.setSmmc(smmc);
		szsm.setSmjc(smjc);
		szsm.setSl(sl);
		szsm.setFpbm(fpbm);
		szsm.setHdkpbl(hdkpbl);
		szsm.setCzkpxe(czkpxe);
		szsm.setCezs(cezs);
		szsm.setStatus(status);
		szsm.setSzbm("10");

		int result = szsm.add();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toPmList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "品目新增失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toJqxhList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Jqxh jqxh = new Jqxh();
		ArrayList alJqxh = jqxh.selectAll();

		request.setAttribute("alJqxh", alJqxh);
		return mapping.findForward("toJqxhList");
	}

	public ActionForward toJqxhAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toJqxhAdd");
	}

	public ActionForward jqxhAddAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String jqxhbm = request.getParameter("jqxhbm");
		String jqxhmc = request.getParameter("jqxhmc");
		String sccs = request.getParameter("sccs");
		int status = Integer.valueOf(request.getParameter("status"));

		Jqxh jqxh = new Jqxh();
		jqxh.setJqxhbm(jqxhbm);
		jqxh.setJqxhmc(jqxhmc);
		jqxh.setSccs(sccs);
		jqxh.setStatus(status);

		int result = jqxh.add();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toJqxhList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "新增失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toJqxhEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String jqxhbm = request.getParameter("jqxhbm");
		Jqxh jqxh = new Jqxh(jqxhbm);
		request.setAttribute("jqxh", jqxh);
		return mapping.findForward("toJqxhEdit");
	}

	public ActionForward jqxhEditAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String jqxhbm = request.getParameter("jqxhbm");
		String jqxhmc = request.getParameter("jqxhmc");
		String sccs = request.getParameter("sccs");
		int status = Integer.valueOf(request.getParameter("status"));
		Jqxh jqxh = new Jqxh(jqxhbm);
		jqxh.setJqxhmc(jqxhmc);
		jqxh.setSccs(sccs);
		jqxh.setStatus(status);

		int result = jqxh.update();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toJqxhList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "更新失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward jqxhDelete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		int sid = Integer.valueOf(request.getParameter("sid"));
		Jqxh jqxh = new Jqxh();
		String table = "SKQ_JQXH";
		jqxh.setTable(table);
		int result = jqxh.deleteById(sid);
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toJqxhList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "删除失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	// 注册类型
	public ActionForward toZclxList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Zclx zclx = new Zclx();
		ArrayList alZclx = zclx.selectAll();
		request.setAttribute("alZclx", alZclx);
		return mapping.findForward("toZclxList");
	}

	public ActionForward toZclxAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("toZclxAdd");
	}

	public ActionForward zclxAddAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String zclxbm = request.getParameter("zclxbm");
		String zclxmc = request.getParameter("zclxmc");
		String zclxjc = request.getParameter("zclxjc");
		int status = Integer.valueOf(request.getParameter("status"));

		Zclx zclx = new Zclx();
		zclx.setZclxmc(zclxmc);
		zclx.setZclxjc(zclxjc);
		zclx.setZclxbm(zclxbm);
		zclx.setStatus(status);

		int result = zclx.add();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toZclxList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "新增失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toZclxEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String zclxbm = request.getParameter("zclxbm");
		Zclx zclx = new Zclx(zclxbm);
		request.setAttribute("zclx", zclx);
		return mapping.findForward("toZclxEdit");
	}

	public ActionForward zclxEditAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String zclxbm = request.getParameter("zclxbm");
		String zclxmc = request.getParameter("zclxmc");
		String zclxjc = request.getParameter("zclxjc");
		int status = Integer.valueOf(request.getParameter("status"));
		Zclx zclx = new Zclx(zclxbm);
		zclx.setZclxmc(zclxmc);
		zclx.setZclxjc(zclxjc);
		zclx.setStatus(status);
		int result = zclx.update();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toZclxList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "更新失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward zclxDelete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		int sid = Integer.valueOf(request.getParameter("sid"));
		Zclx zclx = new Zclx();
		String table = "SKQ_ZCLX";
		zclx.setTable(table);
		int result = zclx.deleteById(sid);
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toZclxList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "删除失败！");
			return mapping.findForward("error");
		}

		return null;
	}

	// 行业管理
	public ActionForward toHyList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Hy hy = new Hy();
		ArrayList alHy = hy.selectAll();
		request.setAttribute("alHy", alHy);
		return mapping.findForward("toHyList");
	}

	public ActionForward toHyAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toHyAdd");
	}

	public ActionForward hyAddAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String hybm = request.getParameter("hybm");
		String hymc = request.getParameter("hymc");
		String hyjc = request.getParameter("hyjc");
		int status = Integer.valueOf(request.getParameter("status"));
		Hy hy = new Hy();
		hy.setHybm(hybm);
		hy.setHymc(hymc);
		hy.setHyjc(hyjc);
		hy.setStatus(status);
		int result = hy.add();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toHyList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "新增失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toHyEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String hybm = request.getParameter("hybm");
		Hy hy = new Hy(hybm);
		request.setAttribute("hy", hy);
		return mapping.findForward("toHyEdit");
	}

	public ActionForward hyEditAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String hybm = request.getParameter("hybm");
		String hymc = request.getParameter("hymc");
		String hyjc = request.getParameter("hyjc");
		int status = Integer.valueOf(request.getParameter("status"));
		Hy hy = new Hy(hybm);
		hy.setHymc(hymc);
		hy.setHyjc(hyjc);
		hy.setStatus(status);
		int result = hy.update();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toHyList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "更新失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward deleteHy(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		int sid = Integer.valueOf(request.getParameter("sid"));
		Hy hy = new Hy();
		String table = "SKQ_HY";
		hy.setTable(table);
		int result = hy.deleteById(sid);
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toHyList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "删除失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toHymxList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String hybm = request.getParameter("hybm");
		Hymx hymx = new Hymx();
		ArrayList alHymx = hymx.selectByHybm(hybm);
		String table = "SKQ_HY";
		String fieldname = "HYMC";
		String where = " where HYBM='" + hybm + "'";
		hymx.setTable(table);
		String hymc = hymx.getFieldName(fieldname, where);
		request.setAttribute("alHymx", alHymx);
		request.setAttribute("hymc", hymc);
		request.setAttribute("hybm", hybm);
		return mapping.findForward("toHymxList");
	}

	public ActionForward toHymxAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String hybm = request.getParameter("hybm");
		request.setAttribute("hybm", hybm);
		RequestDispatcher dispatcher = request
				.getRequestDispatcher("system/hymx.add.jsp?hybm=" + hybm);
		dispatcher.forward(request, response);
		return null;
	}

	public ActionForward hymxAddAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String hybm = request.getParameter("hybm");
		String hymxbm = request.getParameter("hymxbm");
		String hymxmc = request.getParameter("hymxmc");
		String hymxjc = request.getParameter("hymxjc");
		int status = Integer.valueOf(request.getParameter("status"));
		Hymx hymx = new Hymx();
		hymx.setHybm(hybm);
		hymx.setHymxbm(hymxbm);
		hymx.setHymxmc(hymxmc);
		hymx.setHymxjc(hymxjc);
		hymx.setStatus(status);
		int result = hymx.add();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toHymxList&hybm="
							+ hybm);
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "新增失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toHymxEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String hymxbm = request.getParameter("hymxbm");
		Hymx hymx = new Hymx(hymxbm);
		request.setAttribute("hymx", hymx);
		return mapping.findForward("toHymxEdit");
	}

	public ActionForward hymxEditAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String hymxbm = request.getParameter("hymxbm");
		String hymxmc = request.getParameter("hymxmc");
		String hymxjc = request.getParameter("hymxjc");
		int status = Integer.valueOf(request.getParameter("status"));
		Hymx hymx = new Hymx(hymxbm);
		hymx.setHymxmc(hymxmc);
		hymx.setHymxjc(hymxjc);
		hymx.setStatus(status);
		String hybm = hymx.getHybm();
		System.out.println("hybm==" + hybm);
		int result = hymx.update();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toHymxList&hybm="
							+ hybm);
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "更新失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward deleteHymx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		int sid = Integer.valueOf(request.getParameter("sid"));
		String hybm = request.getParameter("hybm");
		Hymx hymx = new Hymx();
		String table = "SKQ_HYMX";
		hymx.setTable(table);
		int result = hymx.deleteById(sid);
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toHymxList&hybm="
							+ hybm);
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "删除失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toSwjgList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Swjg swjg = new Swjg();
		ArrayList alSwjg = swjg.selectAll();
		// System.out.println("alSwjg=="+alSwjg);
		request.setAttribute("alSwjg", alSwjg);
		return mapping.findForward("toSwjgList");
	}

	public ActionForward toSwjgAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Swjg swjg = new Swjg();
		ArrayList alSwjg = swjg.selectQy();
		request.setAttribute("alSwjg", alSwjg);
		return mapping.findForward("toSwjgAdd");
	}

	public ActionForward swjgAddAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String swjgbm = request.getParameter("swjgbm");
		String swjgmc = request.getParameter("swjgmc");
		String swjgjc = request.getParameter("swjgjc");
		String sjswjgbm = request.getParameter("sjswjgbm");
		int status = Integer.valueOf(request.getParameter("status"));
		Swjg swjg = new Swjg();
		swjg.setSwjgbm(swjgbm);
		swjg.setSwjgmc(swjgmc);
		swjg.setSwjgjc(swjgjc);
		swjg.setSjswjgbm(sjswjgbm);
		swjg.setStatus(status);
		int result = swjg.add();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toSwjgList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "新增失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toSwjgEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String swjgbm = request.getParameter("swjgbm");
		Swjg swjg = new Swjg(swjgbm);
		ArrayList alSwjg = swjg.selectNotInSwjgbm(swjgbm);
		request.setAttribute("alSwjg", alSwjg);
		request.setAttribute("swjg", swjg);
		return mapping.findForward("toSwjgEdit");
	}

	public ActionForward swjgEditAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String swjgbm = request.getParameter("swjgbm");
		String swjgmc = request.getParameter("swjgmc");
		String swjgjc = request.getParameter("swjgjc");
		String sjswjgbm = request.getParameter("sjswjgbm");
		int status = Integer.valueOf(request.getParameter("status"));
		Swjg swjg = new Swjg(swjgbm);
		swjg.setSwjgmc(swjgmc);
		swjg.setSwjgjc(swjgjc);
		swjg.setSjswjgbm(sjswjgbm);
		swjg.setStatus(status);
		int result = swjg.update();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toSwjgList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "更新失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward swjgDelete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		int sid = Integer.valueOf(request.getParameter("sid"));
		Swjg swjg = new Swjg();
		String table = "SKQ_SWJG";
		swjg.setTable(table);
		int result = swjg.deleteById(sid);
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toSwjgList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "删除失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	// 用户管理
	public ActionForward toUserList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		User user = new User();
		ArrayList alUser = user.selectAll();
		request.setAttribute("alUser", alUser);
		return mapping.findForward("toUserList");
	}

	public ActionForward toUserEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String username = request.getParameter("username");
		User user = new User(username);
		Swjg swjg = new Swjg();
		ArrayList alSwjg = swjg.selectQy();
		request.setAttribute("alSwjg", alSwjg);
		request.setAttribute("user", user);
		return mapping.findForward("toUserEdit");
	}

	public ActionForward userEditAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String username = request.getParameter("username");
		String actualname = request.getParameter("actualname");
		String password = request.getParameter("password");
		String swjgbm = request.getParameter("swjgbm");
		int status = Integer.valueOf(request.getParameter("status"));

		User user = new User(username);
		System.out.println("sid==" + user.getSid());
		user.setActualname(actualname);
		if (password != null && !"".equals(password)) {
			user.setPassword(Util.tomd5(password));
		}
		System.out.println("password==" + Util.tomd5(password));
		user.setSwjgbm(swjgbm);
		user.setStatus(status);

		int result = user.update();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toUserList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "更新失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toUserAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Swjg swjg = new Swjg();
		ArrayList alSwjg = swjg.selectQy();
		request.setAttribute("alSwjg", alSwjg);
		return mapping.findForward("toUserAdd");
	}

	public ActionForward userAddAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String username = request.getParameter("username");
		String actualname = request.getParameter("actualname");
		String password = request.getParameter("password");
		String swjgbm = request.getParameter("swjgbm");
		int status = Integer.valueOf(request.getParameter("status"));
		User user = new User();
		user.setUsername(username);
		user.setActualname(actualname);
		user.setPassword(Util.tomd5(password));
		user.setSwjgbm(swjgbm);
		user.setStatus(status);
		int result = user.add();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toUserList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "新增失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward userDelete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		int sid = Integer.valueOf(request.getParameter("sid"));
		Swjg swjg = new Swjg();
		String table = "SKQ_USER";
		swjg.setTable(table);
		int result = swjg.deleteById(sid);
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toUserList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "删除失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toUserAddRole(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String username = request.getParameter("username");
		User user = new User(username);
		String userrole = user.selectUserRole(username);
		Role role = new Role();
		ArrayList alRole = role.selectAll();
		request.setAttribute("alRole", alRole);
		request.setAttribute("userrole", userrole);
		request.setAttribute("user", user);
		return mapping.findForward("toUserAddRole");
	}

	// 权限分配给角色
	public ActionForward userAddRoleAction(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		String username = request.getParameter("username");
		String roleidStr = request.getParameter("roleidStr");
		User user = new User();
		int result = user.addRole(roleidStr, username);
		if (result != -1) {
			request.setAttribute("successMsg", "角色分配成功！");
			request.setAttribute("url", "/javaskweb/system.do?op=toUserList");
			return mapping.findForward("success");
		} else {
			request.setAttribute("errorMsg", "角色分配失败！");
			return mapping.findForward("error");
		}
	}

	// 角色管理

	public ActionForward toRoleList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Role role = new Role();
		ArrayList alRole = role.selectAll();

		request.setAttribute("alRole", alRole);
		return mapping.findForward("toRoleList");
	}

	public ActionForward toRoleAdd(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Role role = new Role();
		ArrayList alMenu = role.selectMenu();
		request.setAttribute("alMenu", alMenu);
		return mapping.findForward("toRoleAdd");
	}

	public ActionForward roleAddAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String rolename = request.getParameter("rolename");
		String note = request.getParameter("note");
		String menuStr = request.getParameter("menuStr");
		Role role = new Role();
		role.setRolename(rolename);
		role.setNote(note);
		role.setMenuStr(menuStr);
		int result = role.add();
		if (result != -1) {
			if (menuStr != null && !"".equals(menuStr)) {
				role.addMenu(result);
			}
			RequestDispatcher dispatcher = request
			.getRequestDispatcher("system.do?op=toRoleList");
	dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "新增失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toRoleEdit(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int sid = Integer.valueOf(request.getParameter("sid"));
		Role role = new Role(sid);
		request.setAttribute("role", role);
		return mapping.findForward("toRoleEdit");
	}

	public ActionForward roleEditAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		String rolename = request.getParameter("rolename");
		String note = request.getParameter("note");
		String menuStr = request.getParameter("menuStr");
		System.out.println(menuStr);
		int sid = Integer.valueOf(request.getParameter("sid"));
		Role role = new Role(sid);
		role.setRolename(rolename);
		role.setNote(note);
		role.setMenuStr(menuStr);
		int result = role.update();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toRoleList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "更新失败！");
			return mapping.findForward("error");
		}
		return null;
	}
	
	public ActionForward roleDelete(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		int sid = Integer.valueOf(request.getParameter("sid"));
		Role role = new Role();
		String table = "SKQ_ROLE";
		role.setTable(table);
		int result = role.deleteById(sid);
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toRoleList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "删除失败！");
			return mapping.findForward("error");
		}
		return null;
	}

	public ActionForward toRoleAddUser(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int sid = Integer.valueOf(request.getParameter("sid"));
		Role role = new Role(sid);
		String roleuser = role.selectRoleUser(sid);
		User user = new User();
		ArrayList alUser = user.selectAll();
		request.setAttribute("alUser", alUser);
		request.setAttribute("role", role);
		request.setAttribute("roleuser", roleuser);
		return mapping.findForward("toRoleAddUser");
	}

	public ActionForward roleAddUserAction(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		int sid = Integer.valueOf(request.getParameter("sid"));
		String usernameStr = request.getParameter("usernameStr");
		Role role = new Role(sid);
		int result = role.addUser(usernameStr, sid);
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("system.do?op=toRoleList");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "用户分配失败！");
			return mapping.findForward("error");
		}
		return null;
	}
	 public ActionForward updateJcxxSz(ActionMapping mapping, ActionForm form,
			 HttpServletRequest request, HttpServletResponse response) {
             int fpzs=Integer.parseInt(request.getParameter("fpzs"));
             double lxkpzje=Double.parseDouble(request.getParameter("lxkpzje"));
             int lxkpzs=Integer.parseInt(request.getParameter("lxkpzs"));
             int lxkpts=Integer.parseInt(request.getParameter("lxkpts"));
             Jcxx jcxx=new Jcxx();
             jcxx.setFpzs(fpzs);
             jcxx.setLxkpts(lxkpts);
             jcxx.setLxkpzje(lxkpzje);
             jcxx.setLxkpzs(lxkpzs);
             Jcxx.updateJcxx(jcxx);
          jcxx=Jcxx.getJcxx();
      	   request.setAttribute("jcxx", jcxx);
			 return mapping.findForward("toJcxxSz");
			 }
}


// public ActionForward fpEditAction(ActionMapping mapping, ActionForm form,
// HttpServletRequest request, HttpServletResponse response) {
// // TODO Auto-generated method stub
// return null;
// }
