/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package jsdt.action.cxtj;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.FutureTask;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jsdt.model.Fpkj;
import jsdt.model.Nsrxx;
import jsdt.model.Sbsj;
import jsdt.model.Swjg;
import jsdt.model.Szsm;
import jsdt.model.WriteExcelFpkj;
import jsdt.model.WriteExcelSbsj;
import jsdt.model.cxtj.cxFpkj;
import jsdt.model.cxtj.cxFplg;
import jsdt.model.cxtj.cxJqxx;
import jsdt.model.cxtj.cxNsrxx;
import jsdt.model.cxtj.cxRjymx;
import jsdt.model.cxtj.cxSbsj;
import jsdt.tools.CreateKPXml;
import jsdt.tools.Query;
import jsdt.tools.SYSTEM;
import jsdt.tools.Util;
import jsdt.tools.future.RealJdkData;
import jsdt.tools.future.RealJdkDataArrayList;
import jsdt.tools.future.RealJdkDataInt;
import json.JsonKit;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

/**
 * MyEclipse Struts Creation date: 03-16-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="op" validate="true"
 */
public class CxtjAction extends DispatchAction {
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	// 查询纳税人信息
	public ActionForward toNsrxxImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("toNsrxxImport");
	}
	
	public ActionForward excel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
			ArrayList<Nsrxx> nsrxxList=null;
			cxNsrxx cx = new cxNsrxx();
			nsrxxList=cx.selectNsrxx1("");
			for(int i=0;i<nsrxxList.size();i++){
				Nsrxx nsrxx=nsrxxList.get(i);
  				WriteExcelFpkj write=new WriteExcelFpkj();
				//write.getExcel1(nsrxx.getNsrmc().trim()+Util.getPreviousMonthFirst().substring(0,7)+".xls", response.getOutputStream(),nsrxx.getNsrwjbm(),"2013-01-01","2013-01-31","","","","");
				write.getExcel1(nsrxx.getNsrmc().trim()+Util.getPreviousMonthFirst().substring(0,7)+".xls", response.getOutputStream(),nsrxx.getNsrwjbm(),Util.getPreviousMonthFirst(),Util.getPreviousMonthEnd(),"","","","");
			}
			return null;
	}
	
	public ActionForward hzexcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
			 
				 
  				WriteExcelSbsj write=new WriteExcelSbsj();
				//write.getExcel1(nsrxx.getNsrmc().trim()+Util.getPreviousMonthFirst().substring(0,7)+".xls", response.getOutputStream(),nsrxx.getNsrwjbm(),"2013-01-01","2013-01-31","","","","");
				write.getExcel1(Util.getPreviousMonthFirst().substring(0,7)+"汇总.xls", response.getOutputStream(),"",Util.getPreviousMonthFirst(),Util.getPreviousMonthEnd());
		 
			return null;
	}
	
	public ActionForward deleteSbsj(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
     String sid=request.getParameter("sid");
     String sbrq=Query.getField("select sbrq from skq_sbsj where sid="+sid, "sbrq");
     String nsrwjbm=Query.getField("select nsrwjbm from skq_sbsj where sid="+sid, "nsrwjbm");
     String sql="delete from skq_sbsj where sid="+sid;
     Query.updateField(sql);
     sql="delete from skq_hzsj where hzrq='"+sbrq+"' and nsrwjbm='"+nsrwjbm+"'";
     Query.updateField(sql);
    // return mapping.findForward("toSbsjImport");
		return null;
	}

	
	public ActionForward toNsrxxList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String nsrwjbm = request.getParameter("nsrwjbm");
		String swjgbm = request.getParameter("swjgbm");
		String yhcxswjgbmStr = (String) session.getAttribute("yhcxswjgbmStr");
		int pageSize = SYSTEM.PAGESIZE;
		int pageNo = SYSTEM.PAGENO;
		if (request.getParameter("pageSize") != null
				&& !"".equals(request.getParameter("pageSize"))) {
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		}
		if (request.getParameter("pageNo") != null
				&& !"".equals(request.getParameter("pageNo"))) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}
		String strSql = "";
		if (nsrwjbm != null && !"".equals(nsrwjbm)) {
			for (int i = nsrwjbm.length(); i < 16; i++) {
				nsrwjbm = "0" + nsrwjbm;
			}
			strSql = strSql + " and a.NSRWJBM='" + nsrwjbm + "'";
		}
		if (swjgbm != null && !"".equals(swjgbm)) {
			System.out.println("swjgbm==" + swjgbm);
			strSql = strSql + " and a.SWJGBM in(" + swjgbm + ")";
		}
		if (yhcxswjgbmStr != null && !"".equals(yhcxswjgbmStr)) {
			strSql = strSql + " and a.SWJGBM in(" + yhcxswjgbmStr + ")";
		}
		String sql = "  where 1=1 and a.STATUS=1 " + strSql;
		String order = " order by a.SWJGBM ASC";
		String countSql = "select convert(varchar,a.SID) as SID from SKQ_NSRXX a where a.STATUS=1 "
				+ strSql;
		// System.out.println("sql123=="+sql);
		String fieldname = "SID";
		HashMap hmFy = Query.fySql(pageSize, pageNo, sql, fieldname, countSql,
				"SKQ_NSRXX", order);
		String resultStr = (String) hmFy.get("resultStr");
		String maxCount = (String) hmFy.get("maxCount");
		String maxPage = (String) hmFy.get("maxPage");
		cxNsrxx cx = new cxNsrxx();
		ArrayList al = new ArrayList();
		if (resultStr != null && !"".equals(resultStr)) {
			al = cx.selectNsrxx(resultStr);
		}
		request.setAttribute("al", al);
		request.setAttribute("maxCount", maxCount);
		request.setAttribute("maxPage", maxPage);
		request.setAttribute("pageSize", String.valueOf(pageSize));
		request.setAttribute("pageNo", String.valueOf(pageNo));
		request.setAttribute("nsrwjbm", nsrwjbm);
		request.setAttribute("swjgbm", swjgbm);
		return mapping.findForward("toNsrxxList");
	}

	public ActionForward toNsrxxDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		cxNsrxx cx = new cxNsrxx();
		ArrayList alFpjmx = cx.selectFpjmxByNsrwjbm(nsrwjbm);
		request.setAttribute("nsrxx", nsrxx);
		request.setAttribute("alFpjmx", alFpjmx);
		return mapping.findForward("toNsrxxDetail");
	}

	public ActionForward toNsrxxSwjg(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String yhcxswjgbmStr = (String) session.getAttribute("yhcxswjgbmStr");
		Swjg swjg = new Swjg();
		ArrayList alSwjg = swjg.selectQyBySwjgbmStr(yhcxswjgbmStr);
		request.setAttribute("alSwjg", alSwjg);
		return mapping.findForward("toNsrxxSwjg");
	}

	// 税控装置查询
	public ActionForward toJqxxImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {

		return mapping.findForward("toJqxxImport");
	}

	public ActionForward toJqxxSzsm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Szsm szsm = new Szsm();
		ArrayList alSzsm = szsm.selectAllQy();
		request.setAttribute("alSzsm", alSzsm);
		return mapping.findForward("toJqxxSzsm");
	}

	public ActionForward toJqxxList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String nsrwjbm = request.getParameter("nsrwjbm");
		String swjgbm = request.getParameter("swjgbm");
		String startdate = request.getParameter("startdate");
		String enddate = request.getParameter("enddate");
		String smbm = request.getParameter("smbm");
		String yhcxswjgbmStr = (String) session.getAttribute("yhcxswjgbmStr");
		int pageSize = SYSTEM.PAGESIZE;
		int pageNo = SYSTEM.PAGENO;
		if (request.getParameter("pageSize") != null
				&& !"".equals(request.getParameter("pageSize"))) {
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		}
		if (request.getParameter("pageNo") != null
				&& !"".equals(request.getParameter("pageNo"))) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}
		String sqlStr = "";
		String sqlSwjg = "";
		String sqlNsr = "";
		// 所在税务机关
		if (swjgbm != null && !"".equals(swjgbm)) {
			sqlSwjg = sqlSwjg + " and SWJGBM in(" + swjgbm + ")";
		}
		// 权限范围内税务机关
		if (yhcxswjgbmStr != null && !"".equals(yhcxswjgbmStr)) {
			sqlSwjg = sqlSwjg + " and SWJGBM in(" + yhcxswjgbmStr + ")";
		}
		// 纳税人微机编码查询条件
		if (nsrwjbm != null && !"".equals(nsrwjbm)) {
			for (int i = nsrwjbm.length(); i < 16; i++) {
				nsrwjbm = "0" + nsrwjbm;
			}
			sqlStr = " and a.NSRWJBM='" + nsrwjbm + "'";
		}
		 
		// 登记时间
		if (startdate != null && !"".equals(startdate)) {
			sqlStr = sqlStr + " and a.KQYRQ>='" + startdate + "'";
		}
		if (enddate != null && !"".equals(enddate)) {
			sqlStr = sqlStr + " and a.KQYRQ<='" + enddate + "'";
		}
		// 品目
		if (smbm != null && !"".equals(smbm)) {
			sqlStr = sqlStr
					+ " and a.JQBH in(select distinct JQBH from SKQ_JQSZSM where SMBM in("
					+ smbm + "))";
		}
		String sql = "  where 1=1 " + sqlStr;
		// System.out.println("sql123=="+sql);
		String countSql = "select convert(varchar,a.SID) as SID from SKQ_JQXX a where 1=1 "
				+ sqlStr;
		String fieldname = "SID";
		String order = " order by a.NSRWJBM asc,a.KQYRQ asc";
		HashMap hmFy = Query.fySql(pageSize, pageNo, sql, fieldname, countSql,
				"SKQ_JQXX", order);
		String resultStr = (String) hmFy.get("resultStr");
		String maxCount = (String) hmFy.get("maxCount");
		String maxPage = (String) hmFy.get("maxPage");
		cxJqxx cx = new cxJqxx();
		ArrayList alJqxx = new ArrayList();
		if (resultStr != null && !"".equals(resultStr)) {
			alJqxx = cx.selectJqxx(resultStr);
		}
		request.setAttribute("alJqxx", alJqxx);
		request.setAttribute("nsrwjbm", nsrwjbm);
		request.setAttribute("swjgbm", swjgbm);
		request.setAttribute("startdate", startdate);
		request.setAttribute("enddate", enddate);
		request.setAttribute("smbm", smbm);
		request.setAttribute("maxCount", maxCount);
		request.setAttribute("maxPage", maxPage);
		request.setAttribute("pageSize", String.valueOf(pageSize));
		request.setAttribute("pageNo", String.valueOf(pageNo));
		return mapping.findForward("toJqxxList");
	}

	// 发票领购
	public ActionForward toFplgImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toFplgImport");
	}

	public ActionForward toFplgList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		String nsrwjbm = request.getParameter("nsrwjbm");
		String swjgbm = request.getParameter("swjgbm");
		String startdate = request.getParameter("startdate");
		String enddate = request.getParameter("enddate");
		String yhcxswjgbmStr = (String) session.getAttribute("yhcxswjgbmStr");
		int pageSize = SYSTEM.PAGESIZE;
		int pageNo = SYSTEM.PAGENO;
		if (request.getParameter("pageSize") != null
				&& !"".equals(request.getParameter("pageSize"))) {
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		}
		if (request.getParameter("pageNo") != null
				&& !"".equals(request.getParameter("pageNo"))) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}

		String sqlStr = "";
		String sqlSwjg = "";
		// 所在税务机关
		if (swjgbm != null && !"".equals(swjgbm)) {
			sqlSwjg = sqlSwjg + " and SWJGBM in(" + swjgbm + ")";
		}
		// 权限范围内税务机关
		if (yhcxswjgbmStr != null && !"".equals(yhcxswjgbmStr)) {
			sqlSwjg = sqlSwjg + " and SWJGBM in(" + yhcxswjgbmStr + ")";
		}

		// 纳税人微机编码查询条件
		if (nsrwjbm != null && !"".equals(nsrwjbm)) {
			for (int i = nsrwjbm.length(); i < 16; i++) {
				nsrwjbm = "0" + nsrwjbm;
			}

			sqlStr =sqlStr+ " and a.NSRWJBM='" + nsrwjbm + "'";
		}
		 

		// 登记时间
		if (startdate != null && !"".equals(startdate)) {
			sqlStr = sqlStr + " and a.FPLGRQ>='" + startdate + " 00:00:00'";
		}

		if (enddate != null && !"".equals(enddate)) {
			sqlStr = sqlStr + " and a.FPLGRQ<='" + enddate + " 23:59:59'";
		}

		String order = " order by a.fpqsh desc";
		String sql = " where 1=1 " + sqlStr;
		// System.out.println("sql123=="+sql);
		String countSql = "select convert(varchar,a.SID) as SID from SKQ_FPJMX a where 1=1 "
				+ sqlStr;
		String fieldname = "SID";
		
		HashMap hmFy = Query.fySql(pageSize, pageNo, sql, fieldname, countSql,
				"SKQ_FPJMX", order);

		String resultStr = (String) hmFy.get("resultStr");
		String maxCount = (String) hmFy.get("maxCount");
		String maxPage = (String) hmFy.get("maxPage");

		cxFplg cx = new cxFplg();
		ArrayList alFplg = new ArrayList();
		if (resultStr != null && !"".equals(resultStr)) {
			alFplg = cx.selectFplg(resultStr);
		}

		request.setAttribute("alFplg", alFplg);
		request.setAttribute("nsrwjbm", nsrwjbm);
		request.setAttribute("swjgbm", swjgbm);
		request.setAttribute("startdate", startdate);
		request.setAttribute("enddate", enddate);

		request.setAttribute("maxCount", maxCount);
		request.setAttribute("maxPage", maxPage);
		request.setAttribute("pageSize", String.valueOf(pageSize));
		request.setAttribute("pageNo", String.valueOf(pageNo));
		return mapping.findForward("toFplgList");
	}

	// 查询发票明细
	public ActionForward toFpkjImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toFpkjImport");
	}

	// 发票明细list
	public ActionForward toFpkjList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws UnsupportedEncodingException, InterruptedException, ExecutionException {
		long start=System.currentTimeMillis();
		long begin=System.currentTimeMillis();
		long end=0;
		String nsrwjbm = request.getParameter("nsrwjbm");
		String startdate = request.getParameter("startdate");
		String enddate = request.getParameter("enddate");
		String skygh=request.getParameter("skygh");
		String fpqsh = request.getParameter("fpqsh");
		String fpjzh = request.getParameter("fpjzh");
		String fpdm = request.getParameter("fpdm");
		if(skygh!=null){
		skygh=new String(skygh.getBytes("ISO-8859-1"),"UTF-8");
		}
		HttpSession session = request.getSession();
		String yhcxswjgbmStr = (String) session.getAttribute("yhcxswjgbmStr");
		int pageSize = SYSTEM.PAGESIZE;
		int pageNo = SYSTEM.PAGENO;
		if (request.getParameter("pageSize") != null
				&& !"".equals(request.getParameter("pageSize"))) {
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		}
		if (request.getParameter("pageNo") != null
				&& !"".equals(request.getParameter("pageNo"))) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}

		String strSql = "";
	 
		 

		if (nsrwjbm != null && !"".equals(nsrwjbm)) {
			for (int i = nsrwjbm.length(); i < 16; i++) {
				nsrwjbm = "0" + nsrwjbm;
			}
			nsrwjbm=Query.getFieldStr("select nsrwjbm from skq_nsrxx where nsrwjbm like '%"+nsrwjbm+"%'","nsrwjbm");
			strSql = " and NSRWJBM ='" + nsrwjbm + "'";
		}

		if (startdate != null && !"".equals(startdate)) {
			 
			strSql = strSql + " and KPRQ>='" + startdate + " 00:00:00'";
		}
		if (enddate != null && !"".equals(enddate)) {
			 
			strSql = strSql + " and KPRQ<='" + enddate + " 23:59:59'";
		}
	 
		if (fpdm != null && !"".equals(fpdm)) {
			strSql = strSql + " and FPDM='" + fpdm + "'";
		}
		if (fpqsh != null && !"".equals(fpqsh)) {
			strSql = strSql + " and FPHM >=" + Integer.parseInt(fpqsh);
		}
		if (fpjzh != null && !"".equals(fpjzh)) {
			strSql = strSql + " and FPHM <=" + Integer.parseInt(fpjzh);
		}
		if(skygh!=null&&!"".equals(skygh)){
			strSql=strSql+" and SKY LIKE '%"+skygh+"%'";
		}

		String sql = " where 1=1 " + strSql;
		String order = " order by FPDM,FPHM asc ";
		 
		String countSql = "select convert(varchar,a.SID) as SID from SKQ_FPKJ a where a.STATUS=1 "
				+ strSql;
		
		
		String fieldname = "SID";
		
		begin=System.currentTimeMillis();
		System.out.println("====多线程启动===");
		int nextPage=(pageNo-1)*pageSize;
		String sql_select="SELECT top "+pageSize+" SID  FROM SKQ_FPKJ a"+ " "+sql+" and (a.SID not in (select top "+nextPage+" sid from SKQ_FPKJ a "+sql+order+")) "+order;
		//System.out.println("sql_new:"+sql_select);
		
		//获取总条数
		FutureTask<Integer> maxCountTask=new FutureTask<Integer>(new RealJdkDataInt(countSql));
		
		//获取发票明细list
		FutureTask<ArrayList> alFpkjTTask=new FutureTask<ArrayList>(new RealJdkDataArrayList(sql_select));
		
		//获取正常开票总金额
		sql = "select sum(a.HJZJE) as zcpzje from SKQ_FPKJ a where a.STATUS=1 and a.KPLX=1 "+ strSql;
		fieldname = "zcpzje";
		FutureTask<Double> zcpZjeTask=new FutureTask<Double>(new RealJdkData(sql, fieldname));	
		
		//获取退票总金额
		sql = "select sum(a.HJZJE) as tpzje from SKQ_FPKJ a where a.STATUS=1 and a.KPLX=2 "+ strSql;
		fieldname = "tpzje";
		FutureTask<Double> tpZjeTask=new FutureTask<Double>(new RealJdkData(sql, fieldname));	
		
		//加入线程池
		ExecutorService service =Executors.newFixedThreadPool(4);
		service.submit(maxCountTask);
		service.submit(alFpkjTTask);
		service.submit(zcpZjeTask);
		service.submit(tpZjeTask);
		
		//多线程开始获取结果
		int maxCount=maxCountTask.get();
		String maxPage =String.valueOf((int)Math.ceil((double)maxCount/pageSize));
		ArrayList alFpkj =alFpkjTTask.get();
		double kpzje = 0;
		double zcpzje = zcpZjeTask.get();
	    double tpzje  = tpZjeTask.get();
	    
	    
//		int maxCount =baseClass.getFieldCount(countSql);
//		//System.out.println("countSQL:"+countSql);
//		String maxPage =String.valueOf((int)Math.ceil((double)maxCount/pageSize));
//		cxFpkj cx = new cxFpkj();
//		ArrayList alFpkj = new ArrayList();
//		double kpzje = 0;
//		begin=System.currentTimeMillis();
//		alFpkj = cx.selectFpkj(sql_select);
//		end=System.currentTimeMillis()-begin;
//		System.out.println("查询sid耗时："+end);
//		begin=System.currentTimeMillis();
//		
//		double zcpzje = Query.getFieldDouble(sql, fieldname);
//		end=System.currentTimeMillis()-begin;
//		System.out.println("获取开票总额耗时："+end);
//		
//		begin=System.currentTimeMillis();
//		sql = "select sum(a.HJZJE) as tpzje from SKQ_FPKJ a where a.STATUS=1 and a.KPLX=2 "
//				+ strSql;
//		fieldname = "tpzje";
//		double tpzje = Query.getFieldDouble(sql, fieldname);
//		end=System.currentTimeMillis()-begin;
//		System.out.println("获取退票总额耗时："+end);
		
		
		kpzje = zcpzje - tpzje;
		request.setAttribute("alFpkj", alFpkj);
		request.setAttribute("maxCount", maxCount+"");
		request.setAttribute("maxPage", maxPage);
		request.setAttribute("pageSize", String.valueOf(pageSize));
		request.setAttribute("pageNo", String.valueOf(pageNo));
		request.setAttribute("nsrwjbm", nsrwjbm);
		request.setAttribute("startdate", startdate);
		request.setAttribute("enddate", enddate);
		request.setAttribute("fpqsh", fpqsh);
		request.setAttribute("fpjzh", fpjzh);
		request.setAttribute("fpdm", fpdm);
		if(skygh==null){
			skygh="";
		}
		request.setAttribute("skygh", skygh);
		request.setAttribute("kpzje", String.valueOf(kpzje));
		request.setAttribute("fplx",1+"");
		 
		end=(System.currentTimeMillis()-start)/1000;
		long end_syso=(System.currentTimeMillis()-start);
		System.out.println("共耗时："+end_syso+"ms");
		request.setAttribute("total_time","共耗时："+end+"秒");
		return mapping.findForward("toFpkjList");
	}

	// 申报数据汇总查询
	public ActionForward toSbsjImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toSbsjImport");
	}

	// 本月未申报数据查询
	public ActionForward toBywsbsjImport(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		return mapping.findForward("toBywsbsjImport");
	}

	// 申报数据查询
	public ActionForward toSbsjList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		String startdate = request.getParameter("startdate");
		String enddate = request.getParameter("enddate");
		String swjgbm = request.getParameter("swjgbm");
		HttpSession session = request.getSession();
		String yhcxswjgbmStr = (String) session.getAttribute("yhcxswjgbmStr");
		int pageSize = SYSTEM.PAGESIZE;
		int pageNo = SYSTEM.PAGENO;
		if (request.getParameter("pageSize") != null
				&& !"".equals(request.getParameter("pageSize"))) {
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		}
		if (request.getParameter("pageNo") != null
				&& !"".equals(request.getParameter("pageNo"))) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}
		if(startdate==null||startdate.trim().equals("")){
			startdate=Util.getPreviousMonthFirst();
		}
		if(enddate==null||enddate.trim().equals("")){
			enddate=Util.getPreviousMonthEnd();
		}
			String strSql = "";
			String sqlSwjg = "";

			// 所在税务机关
			if (swjgbm != null && !"".equals(swjgbm)) {
				sqlSwjg = sqlSwjg + " and SWJGBM in(" + swjgbm + ")";
			} else {
				// 权限范围内税务机关
				if (yhcxswjgbmStr != null && !"".equals(yhcxswjgbmStr)) {
					sqlSwjg = sqlSwjg + " and SWJGBM in(" + yhcxswjgbmStr + ")";
				}
			}

			if (nsrwjbm != null && !"".equals(nsrwjbm)) {
				for (int i = nsrwjbm.length(); i < 16; i++) {
					nsrwjbm = "0" + nsrwjbm;
				}

				strSql = strSql+" and a.NSRWJBM='" + nsrwjbm + "'";
			}

			 

			if (startdate != null && !"".equals(startdate)) {
				strSql = strSql + " and a.SSKSSJ>='" + startdate + "'";
			}
			if (enddate != null && !"".equals(enddate)) {
				strSql = strSql + " and a.SSJZSJ<='" + enddate + "'";
			}

			// String sql = "select convert(varchar,a.SID) as SID from SKQ_SBSJ
			// a
			// where 1=1 "+strSql+" order by a.NSRWJBM ASC";
			// System.out.println("sql123=="+sql);
			String sql = " where 1=1 " + strSql;
			String order = " order by a.NSRWJBM ASC";
			String countSql = "select convert(varchar,a.SID) as SID from SKQ_SBSJ a where 1=1 "
					+ strSql;
			String fieldname = "SID";

			HashMap hmFy = Query.fySql(pageSize, pageNo, sql, fieldname,
					countSql, "SKQ_SBSJ", order);

			String resultStr = (String) hmFy.get("resultStr");
			String maxCount = (String) hmFy.get("maxCount");
			String maxPage = (String) hmFy.get("maxPage");

			cxSbsj cx = new cxSbsj();
			ArrayList alSbsj = new ArrayList();

			if (resultStr != null && !"".equals(resultStr)) {
				startdate=Util.toxkrq(startdate);
				enddate=Util.toxkrq(enddate);
				alSbsj = cx.selectSbsj(resultStr, startdate, enddate);
			}
			HashMap hmSb = cx.selectSbsjHz(strSql);

			request.setAttribute("alSbsj", alSbsj);
			request.setAttribute("maxCount", maxCount);
			request.setAttribute("maxPage", maxPage);
			request.setAttribute("pageSize", String.valueOf(pageSize));
			request.setAttribute("pageNo", String.valueOf(pageNo));
			request.setAttribute("hmSb", hmSb);

			request.setAttribute("nsrwjbm", nsrwjbm);
			request.setAttribute("startdate",Util.tobzrq(startdate));
			request.setAttribute("enddate", Util.tobzrq(enddate));
			request.setAttribute("swjgbm", swjgbm);
//		}
		return mapping.findForward("toSbsjList");
}

	public ActionForward toSbsjDetail(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		int sid = Integer.parseInt(request.getParameter("sid"));
		cxSbsj cx = new cxSbsj();
		ArrayList alSbsjmx = cx.selectSbsjzb(sid);
		request.setAttribute("alSbsjmx", alSbsjmx);
		return mapping.findForward("toSbsjDetail");
	}

	// 查询日交易
	public ActionForward toRjyImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toRjyImport");
	}

	public ActionForward toRjyList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		String startdate = request.getParameter("startdate");
		String enddate = request.getParameter("enddate");
		System.out.println("nsrwjbm===" + nsrwjbm);
		String jqbh = "";
		if (nsrwjbm != null && !"".equals(nsrwjbm)) {
			for (int i = nsrwjbm.length(); i < 16; i++) {
				nsrwjbm = "0" + nsrwjbm;
			}

			String sql = "select JQBH from SKQ_JQXX where NSRWJBM='" + nsrwjbm
					+ "'";
			String fieldname = "JQBH";

			jqbh = Query.getFieldStrCx(sql, fieldname);

		}
		String sqlStr = "";
		if (jqbh != null && !"".equals(jqbh)) {
			sqlStr = sqlStr + " and a.JQBH in(" + jqbh + ")";
		}
		if (startdate != null && !"".equals(startdate)) {
			sqlStr = sqlStr + " and a.DQRQ>='" + startdate + "'";
		}
		if (enddate != null && !"".equals(enddate)) {
			sqlStr = sqlStr + " and a.DQRQ<='" + enddate + "'";
		}

		cxRjymx cx = new cxRjymx();

		ArrayList al = cx.selectRjymx(sqlStr);
		request.setAttribute("al", al);
		request.setAttribute("nsrwjbm", nsrwjbm);
		request.setAttribute("startdate", startdate);
		request.setAttribute("enddate", enddate);
		// request.setAttribute("fplx", String.valueOf(fplx));
		return mapping.findForward("toRjyList");
	}

	// 查询用户卡信息
	public ActionForward toYhkImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toYhkImport");
	}

	public ActionForward toYhkInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HashMap UCARDINFO = (HashMap) request.getSession().getAttribute("UCARDINFO");
		System.out.println("toYhkInfo:"+UCARDINFO);
		String yhswjgbmStr = (String) request.getSession().getAttribute("yhswjgbmStr");
		System.out.println("CARDINFO==="+UCARDINFO);
		if (UCARDINFO == null || UCARDINFO.isEmpty()) {
			request.setAttribute("errorMsg", "基础信息读取失败！");
			return mapping.findForward("error");
		} else {
			request.setAttribute("CARDINFO", UCARDINFO);
			return mapping.findForward("toYhkInfo");
		}
	}

	// 税空卡信息查询
	public ActionForward toSkkImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toSkkImport");
	}

	public ActionForward toSkkInfo(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session = request.getSession();
		HashMap CARDINFO = (HashMap) session.getAttribute("FCARDINFO");
		System.out.println("CARDINFO==" + CARDINFO);
		String yhswjgbmStr = (String) session.getAttribute("yhswjgbmStr");
		// System.out.println("CARDINFO==="+CARDINFO);
		if (CARDINFO == null || CARDINFO.isEmpty()) {
			request.setAttribute("errorMsg", "基础信息读取失败！");
			return mapping.findForward("error");
		} else {
			request.setAttribute("CARDINFO", CARDINFO);
			return mapping.findForward("toSkkInfo");
		}
	}

	// 本月未申报用户
	public ActionForward toBywsbImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		return mapping.findForward("toBywsbImport");
	}

	public ActionForward newBywsb(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		cxSbsj cSbsj = new cxSbsj();
		String startdate = request.getParameter("startdate");
		String enddate = request.getParameter("enddate");
		ArrayList al = cSbsj.newSelectWsbsj(nsrwjbm, startdate, enddate);
		request.setAttribute("al", al);
		return mapping.findForward("newBywsb");
	}

	public ActionForward toBywsbList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		cxSbsj cSbsj = new cxSbsj();
		String startdate = request.getParameter("startdate");
		String enddate = request.getParameter("enddate");
		ArrayList al = cSbsj.selectWsbsj(nsrwjbm, startdate, enddate);
		request.setAttribute("al", al);

		return mapping.findForward("toBywsbList");
	}
	//发票单卷汇总信息查询
	public ActionForward toDjhzImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		
		return mapping.findForward("toDjhzImport");
	}
	//发票汇总统计
	public ActionForward toDjhzList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		for(;nsrwjbm.length() < 16 ;){
			nsrwjbm = "0" + nsrwjbm;
		}
		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		cxSbsj cSbsj=new cxSbsj();
		String startdate=request.getParameter("startdate");
		String enddate=request.getParameter("enddate");
		int pageSize = SYSTEM.PAGESIZE;
		int pageNo = SYSTEM.PAGENO;
		if (request.getParameter("pageSize") != null
				&& !"".equals(request.getParameter("pageSize"))) {
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		}
		if (request.getParameter("pageNo") != null
				&& !"".equals(request.getParameter("pageNo"))) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}
		HashMap map = cSbsj.selectFpxx(pageNo,pageSize,nsrwjbm, startdate, enddate);
		ArrayList alDjhz = new ArrayList();
		alDjhz = (ArrayList) map.get("al");
		request.setAttribute("alDjhz", alDjhz);
		request.setAttribute("nsrxx", nsrxx);
		request.setAttribute("pageNo", pageNo);
		request.setAttribute("pageSize", pageSize);
		request.setAttribute("startdate", startdate);
		request.setAttribute("enddate", enddate);
		request.setAttribute("maxPage", map.get("maxPage"));
		request.setAttribute("maxCount", map.get("maxCount"));
		return mapping.findForward("toDjhzList");
	}
	
	//单卷发票开具统计
	public ActionForward toDjkjhzList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String fpdm = request.getParameter("fpdm");
		String fpqsh=request.getParameter("fpqsh");
		String fpjzh=request.getParameter("fpjzh");
		String nsrwjbm=request.getParameter("nsrwjbm");
		String startdate=request.getParameter("startdate");
		String enddate=request.getParameter("enddate");
		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		cxSbsj cSbsj=new cxSbsj();
		int pageSize = SYSTEM.PAGESIZE;
		int pageNo = SYSTEM.PAGENO;
		if (request.getParameter("pageSize") != null
				&& !"".equals(request.getParameter("pageSize"))) {
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		}
		if (request.getParameter("pageNo") != null
				&& !"".equals(request.getParameter("pageNo"))) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}
		HashMap map = cSbsj.selectDjkjxx(pageNo,pageSize,fpdm, Integer.parseInt(fpqsh),Integer.parseInt(fpjzh));
		ArrayList alDjkj = new ArrayList();
		alDjkj = (ArrayList) map.get("arrayList"); 
		request.setAttribute("alDjkj", alDjkj);
		request.setAttribute("fpdm", fpdm);
		request.setAttribute("pageNo", pageNo);
		request.setAttribute("pageSize", pageSize);
		request.setAttribute("fpqsh", fpqsh);
		request.setAttribute("fpjzh", fpjzh);
		request.setAttribute("nsrxx", nsrxx);
		request.setAttribute("startdate", startdate);
		request.setAttribute("enddate", enddate);
		request.setAttribute("maxPage", map.get("maxPage"));
		request.setAttribute("maxCount", map.get("maxCount"));
		return mapping.findForward("toDjkjhzList");
	}
	//单卷发票开具明细统计
	public ActionForward toDjkjmxList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String fpdm = request.getParameter("fpdm");
		String fpqsh = request.getParameter("fpqsh");
		String fpjzh = request.getParameter("fpjzh");
		String qsh = request.getParameter("qsh");
		String jzh = request.getParameter("jzh");
		String startdate=request.getParameter("startdate");
		String enddate=request.getParameter("enddate");
		String nsrwjbm = request.getParameter("nsrwjbm");
		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		cxSbsj cSbsj = new cxSbsj();
		int pageSize = SYSTEM.PAGESIZE;
		int pageNo = SYSTEM.PAGENO;
		if (request.getParameter("pageSize") != null
				&& !"".equals(request.getParameter("pageSize"))) {
			pageSize = Integer.parseInt(request.getParameter("pageSize"));
		}
		if (request.getParameter("pageNo") != null
				&& !"".equals(request.getParameter("pageNo"))) {
			pageNo = Integer.parseInt(request.getParameter("pageNo"));
		}
		HashMap map = cSbsj.selectDjkjmx(pageNo,pageSize,fpdm, Integer.parseInt(fpqsh),Integer.parseInt(fpjzh));
		ArrayList alDjkjmx = new ArrayList();
		alDjkjmx = (ArrayList) map.get("al"); 
		request.setAttribute("alDjkjmx", alDjkjmx);
		request.setAttribute("fpdm", fpdm);
		request.setAttribute("fpqsh", fpqsh);
		request.setAttribute("fpjzh", fpjzh);
		request.setAttribute("qsh", qsh);
		request.setAttribute("jzh", jzh);
		request.setAttribute("pageNo", pageNo);
		request.setAttribute("pageSize", pageSize);
		request.setAttribute("nsrxx", nsrxx);
		request.setAttribute("startdate", startdate);
		request.setAttribute("enddate", enddate);
		request.setAttribute("maxPage", map.get("maxPage"));
		request.setAttribute("maxCount", map.get("maxCount"));
		return mapping.findForward("toDjkjmxList");
	}
	public ActionForward toFpkjxml(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws IOException {
		String nsrwjbm = request.getParameter("nsrwjbm");
		String startdate = request.getParameter("startdate");
		String enddate = request.getParameter("enddate");
		String fpqsh = request.getParameter("fpqsh");
		String fpjzh = request.getParameter("fpjzh");
		String fpdm = request.getParameter("fpdm");
		String skygh=request.getParameter("skygh");
		String strSql="";
		if (nsrwjbm != null && !"".equals(nsrwjbm)) {
			for (int i = nsrwjbm.length(); i < 16; i++) {
				nsrwjbm = "0" + nsrwjbm;
			}
			strSql = " and a.NSRWJBM ='" + nsrwjbm + "'";
		}
		if (startdate != null && !"".equals(startdate)) {
			strSql = strSql + " and a.KPRQ>='" + startdate + " 00:00:00'";
		}
		if (enddate != null && !"".equals(enddate)) {
			strSql = strSql + " and a.KPRQ<='" + enddate + " 23:59:59'";
		}
		if (fpdm != null && !"".equals(fpdm)) {
			strSql = strSql + " and a.FPDM like '%" + fpdm + "%'";
		}
		if (fpqsh != null && !"".equals(fpqsh)) {
			strSql = strSql + " and a.FPHM >=" + Integer.parseInt(fpqsh);
		}
		if (fpjzh != null && !"".equals(fpjzh)) {
			strSql = strSql + " and a.FPHM <=" + Integer.parseInt(fpjzh);
		}
		if(skygh!=null&&!"".equals(skygh)){
			strSql=strSql+" and a.SKY LIKE '%"+skygh+"%'";
		}
		String type=request.getParameter("type");
		if(type==null){
			type="1";
		}
		if(type.equals("1")){
			strSql=strSql+" and a.kplx='1' ";
		}else if(type.equals("2")){
			strSql=strSql+" and a.kplx='2' ";
		}
		else if(type.equals("3")){
			strSql=strSql+" and a.kplx='3' ";
		}
		
		CreateKPXml kpxml=new CreateKPXml();
		cxFpkj cx = new cxFpkj();
		ArrayList<Fpkj> fpkjList= cx.selectFpkjDcXml(strSql);
		Nsrxx nsrxx=new Nsrxx(nsrwjbm);
		
		String fileName="";
		if(type.equals("1")){
		fileName="D:\\taxML_NJSCZKP_"+nsrxx.getNsrsbh()+"_"+nsrxx.getSwjgbm()+"_"+Util.toxkrq(Util.getFormatDate())+"_000000000000_00000000_01.xml";
		}else if(type.equals("2")){
		fileName="D:\\taxML_NJSCZKP_"+nsrxx.getNsrsbh()+"_"+nsrxx.getSwjgbm()+"_"+Util.toxkrq(Util.getFormatDate())+"_000000000000_00000000_01_hzp.xml";
		}
		else if(type.equals("3")){
		fileName="D:\\taxML_NJSCZKP_"+nsrxx.getNsrsbh()+"_"+nsrxx.getSwjgbm()+"_"+Util.toxkrq(Util.getFormatDate())+"_000000000000_00000000_01_zfp.xml";
		}
		kpxml.setDataList(fpkjList);
		String flag="65";
		String reason="您已经导出成功，文件路径为："+fileName;
		try{
		
		kpxml.createXMLFile(fileName,nsrwjbm,type);
		}catch (Exception e) {
			 flag="67";
			 reason="文件导出失败:"+e.getMessage();
		}
		HashMap<String,Object> map=new HashMap<String, Object>();
		map.put("flag", flag);
		map.put("reason",reason);
		String out_text=JsonKit.mapToJson(map, 8);
		PrintWriter out = response.getWriter();  
		System.out.println("返回结果："+out_text);
		out.write(reason);  
		
	    out.flush();  
	    out.close();  
		return null;
	}
	
	 public ActionForward toSbsjgenreate(ActionMapping mapping, ActionForm form,
	 HttpServletRequest request, HttpServletResponse response) {
	     String last_time=Util.getPreviousMonthFirst();
	     String end_time=Util.getPreviousMonthEnd();
	     
		 List<Nsrxx> nsrxxList=new cxNsrxx().selectNsrxx1("");
		 System.out.println("nsrxxList:"+nsrxxList.size());
		 for(int i=0;i<nsrxxList.size();i++){
			 Nsrxx nsrxx=nsrxxList.get(i);
			 String nsrwjbm=nsrxx.getNsrwjbm();
			 int count=Query.getFieldInt("select count(*) AS TOTAL from skq_sbsj where SSKSSJ>='"+last_time+"' and SSJZSJ<='"+end_time+"' and nsrwjbm like '%"+nsrwjbm+"%'", "TOTAL");
			 if(count==0){
				 Sbsj sbsj=new Sbsj();
				 	  sbsj.setSskssj(last_time);
				 	  sbsj.setSsjzsj(end_time);
				 	  int zcpfs=Query.getFieldInt("select count(*) AS TOTAL from skq_fpkj where nsrwjbm='"+nsrwjbm+"' and kprq>='"+last_time+"' and kprq<='"+end_time+"' and kplx='1'", "TOTAL");
				 	  double zcpje=Query.getFieldInt("select sum(hjzje) AS TOTAL from skq_fpkj where nsrwjbm='"+nsrwjbm+"' and kprq>='"+last_time+"' and kprq<='"+end_time+"' and kplx='1'", "TOTAL");
				 	  
				 	 int tpfs=Query.getFieldInt("select count(*) AS TOTAL from skq_fpkj where nsrwjbm='"+nsrwjbm+"' and kprq>='"+last_time+"' and kprq<='"+end_time+"' and kplx='2'", "TOTAL");
				 	 double tpje=Query.getFieldInt("select sum(hjzje) AS TOTAL from skq_fpkj where nsrwjbm='"+nsrwjbm+"' and kprq>='"+last_time+"' and kprq<='"+end_time+"' and kplx='2'", "TOTAL");
				 	  
				 	 sbsj.setZcpfs(zcpfs);
				 	 sbsj.setTpfs(tpfs);
				 	 sbsj.setZcpzje(zcpje);
				 	 sbsj.setTpzje(tpje);
				 	 sbsj.setNsrwjbm(nsrwjbm);
				 	 sbsj.setJqbh(nsrxx.getJqbh(nsrwjbm));
				 	 sbsj.setSblx(1);
				 	 sbsj.setKpjzsj(Util.hqjkhcrq());
				 	 sbsj.setDzkpxe(5000);
				 	 sbsj.setYljkpxe(42000000.00);
				 	 sbsj.setYljtpxe(1000000.00);
				 	 sbsj.setCjrq(Util.getFormatDate());
				 	 sbsj.setSbrq(Util.getFormatDate());
				 	 sbsj.setMac("0F6F87EA");
				 	 sbsj.add();
			 }
		 }
		 
	 return null;
	 }
}
// public ActionForward execute(ActionMapping mapping, ActionForm form,
// HttpServletRequest request, HttpServletResponse response) {
// // TODO Auto-generated method stub
// return null;
// }
