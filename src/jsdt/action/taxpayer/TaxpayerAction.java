/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package jsdt.action.taxpayer;

import java.io.IOException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.UUID;

import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import jsdt.model.Hy;
import jsdt.model.Hymx;
import jsdt.model.JqZx;
import jsdt.model.Jqsd;
import jsdt.model.Jqxh;
import jsdt.model.Jqxx;
import jsdt.model.Nsrxx;
import jsdt.model.Swjg;
import jsdt.model.Szsm;
import jsdt.model.Tfy;
import jsdt.model.Xxfs;
import jsdt.model.Zclx;
import jsdt.tools.Query;
import jsdt.tools.SYSTEM;

import org.apache.log4j.Logger;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;

/**
 * MyEclipse Struts Creation date: 03-11-2011
 * 
 * XDoclet definition:
 * 
 * @struts.action parameter="op" validate="true"
 */
public class TaxpayerAction extends DispatchAction {
	Logger log=Logger.getLogger(TaxpayerAction.class);
	/*
	 * Generated Methods
	 */

	/**
	 * Method execute
	 * 
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	// public ActionForward execute(ActionMapping mapping, ActionForm form,
	// HttpServletRequest request, HttpServletResponse response) {
	// // TODO Auto-generated method stub
	// return null;
	// }
	// 进入下一步页面
	public ActionForward toImport(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		return mapping.findForward("toImport");
	}

	// 输入微机编码，判断是否存在 ，不存在路线
	public ActionForward toCheckTaxpayer(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) {
		ActionForward forward = null;
		String nsrwjbm = request.getParameter("nsrwjbm");

		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		int sid = nsrxx.getSid();
		// 判断纳税人是否存在
		if (sid == 0) {// 不存在，从征管获取纳税人信息
			request.setAttribute("nsrwjbm", nsrwjbm);
			forward = mapping.findForward("noExist");
		} else {// 存在
			request.setAttribute("nsrxx", nsrxx);
			forward=mapping.findForward("isExist");
		}
		return forward;
	}

	// 选择行业明细
	public ActionForward chooseHYMX(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String hybm = request.getParameter("hybm");
		Hymx hymx = new Hymx();
		ArrayList alHymx = hymx.selectByHybmQy(hybm);
		request.setAttribute("alHymx", alHymx);
		return mapping.findForward("toHYMX");
	}

	// 纳税人增加
	public ActionForward nsrxxAddAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		ActionForward forward = null;
		String nsrwjbm = request.getParameter("nsrwjbm");
		String nsrsbh = request.getParameter("nsrsbh");
		String nsrmc = request.getParameter("nsrmc");
		String jydz = request.getParameter("jydz");
		String frdb = request.getParameter("frdb");
		String zclxbm = request.getParameter("zclxbm");
		String hybm = request.getParameter("hybm");
		String hymxbm = request.getParameter("hymxbm");
		int zsfs = Integer.parseInt(request.getParameter("zsfs"));
		double yhde = 0;
		if (request.getParameter("yhde") != null
				&& !"".equals(request.getParameter("yhde"))) {
			yhde = Double.parseDouble(request.getParameter("yhde"));
		}
		String swjgbm = request.getParameter("swjgbm");
		String bsy = request.getParameter("bsy");
		String ssgly = request.getParameter("ssgly");
		Nsrxx nsrxx = new Nsrxx();
		nsrxx.setNsrwjbm(nsrwjbm);
		nsrxx.setNsrsbh(nsrsbh);
		nsrxx.setNsrmc(nsrmc.trim());
		nsrxx.setJydz(jydz);
		nsrxx.setFrdb(frdb);
		nsrxx.setZclxbm(zclxbm);
		nsrxx.setHybm(hybm);
		nsrxx.setHymxbm(hymxbm);
		nsrxx.setZsfs(zsfs);
		nsrxx.setYhde(yhde);
		nsrxx.setSwjgbm(swjgbm);
		nsrxx.setBsy(bsy);
		nsrxx.setSsgly(ssgly);
		nsrxx.setStatus(1);
		int result = nsrxx.add();
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("taxpayer.do?op=nsrSzsmList&nsrwjbm="
							+ nsrwjbm);
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "纳税人登记信息，保存失败！");
			forward = mapping.findForward("error");
		}
		return forward;
	}

	// 选择注册类型
	public ActionForward chooseZCLX(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Zclx zclx = new Zclx();

		ArrayList alZclx = zclx.selectQy();
		request.setAttribute("alZclx", alZclx);
		return mapping.findForward("toZCLX");
	}

	// 选择所属行业
	public ActionForward chooseSSHY(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Hy hy = new Hy();

		ArrayList alHy = hy.selectQy();
		request.setAttribute("alHy", alHy);
		return mapping.findForward("toSSHY");
	}

	// public ActionForward chooseHYMX(ActionMapping mapping, ActionForm form,
	// HttpServletRequest request, HttpServletResponse response) {
	// String hybm = request.getParameter("hybm");
	// Hymx hymx = new Hymx();
	// ArrayList alHymx = hymx.selectByHybmQy(hybm);
	// request.setAttribute("alHymx", alHymx);
	// return mapping.findForward("toHYMX");
	// }

	// 选择税务机关
	public ActionForward chooseSWJG(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Swjg swjg = new Swjg();

		ArrayList alSwjg = swjg.selectQy();
		request.setAttribute("alSwjg", alSwjg);
		return mapping.findForward("toSWJG");
	}

	// 纳税人添加成功后选择税目编码界面
	public ActionForward nsrSzsmList(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");

		Nsrxx nsrxx = new Nsrxx(nsrwjbm);

		request.setAttribute("nsrxx", nsrxx);
		return mapping.findForward("toNsrSZSM");
	}

	// 进入所有的税种税目界面
	public ActionForward addNrsSzsm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		Szsm szsm = new Szsm();
		ArrayList alSzsm = szsm.selectAllQy();
		// System.out.println("alSzsm=="+alSzsm);
		Nsrxx nsrxx = new Nsrxx();
		String nsrszsmStr = nsrxx.selectNsrSzsmStr(nsrwjbm);
		if (nsrszsmStr == null) {
			nsrszsmStr = "";
		}
		request.setAttribute("alSzsm", alSzsm);
		request.setAttribute("nsrszsmStr", nsrszsmStr);
		request.setAttribute("nsrwjbm", nsrwjbm);
		return mapping.findForward("toNsrSZSMAdd");
	}

	// 选择添加其中税种税目
	public ActionForward addNrsSzsmAction(ActionMapping mapping,
			ActionForm form, HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		ActionForward forward = null;
		HttpSession session = request.getSession();

		// TODO Auto-generated method stub
		String nsrwjbm = request.getParameter("nsrwjbm");
		String nsrszsmStr = request.getParameter("nsrszsmStr");
		//session.setAttribute("nsrszsmStr", nsrszsmStr);
		String[] szsmArr = nsrszsmStr.split(",");
		String szsmStr = "";
		for (int i = 0; i < szsmArr.length; i++) {
			if ("".equals(szsmStr)) {
				szsmStr = "'" + szsmArr[i] + "'";
			} else {
				szsmStr = szsmStr + ",'" + szsmArr[i] + "'";
			}
		}
		Szsm szsm = new Szsm();
		ArrayList nsrszsm = szsm.selectBySzsmStr(szsmStr);
		Nsrxx nsrxx = new Nsrxx();
		nsrxx.setNsrszsm(nsrszsm);
		nsrxx.setNsrwjbm(nsrwjbm);
		nsrxx.setQysmbmStr(nsrszsmStr);
		int result = nsrxx.addSzsm();
		if (result != -1) {
			request.setAttribute("url",
					"/javaskweb/taxpayer.do?op=nsrSzsmList&nsrwjbm=" + nsrwjbm);
			request.setAttribute("successMsg", "税种税目添加成功！");
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("success.jsp");
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "纳税人税种税目，保存失败！");
			forward = mapping.findForward("error");
		}
		return forward;
	}

	// 税控装置信息录入
	public ActionForward skzzxx(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ActionForward forward = null;
		String nsrwjbm = request.getParameter("nsrwjbm");
		String jqbh = request.getParameter("jqbh");
		String jumpFlag = request.getParameter("jumpFlag");
		if (jumpFlag == null) {
			jumpFlag = "";
		}

		Jqxh jqxh = new Jqxh();
		ArrayList alJqxh = jqxh.selectQy();
		Nsrxx nsrxx = new Nsrxx();
		ArrayList nsrszsm = nsrxx.selectNsrSzsm(nsrwjbm);
		// 如果机器编码为空
		if (jqbh == null || "".equals(jqbh)) {

			request.setAttribute("alJqxh", alJqxh);
			request.setAttribute("nsrwjbm", nsrwjbm);
			request.setAttribute("nsrszsm", nsrszsm);
			request.setAttribute("jumpFlag", jumpFlag);
			forward = mapping.findForward("toJqxxAdd");
		} else {
			Jqxx jqxx = new Jqxx(jqbh);
            
			request.setAttribute("jqxx", jqxx);
			request.setAttribute("alJqxh", alJqxh);
			request.setAttribute("nsrwjbm", nsrwjbm);
			request.setAttribute("nsrszsm", nsrszsm);
			request.setAttribute("jumpFlag", jumpFlag);
			forward = mapping.findForward("toJqxxEdit");
		}
		return forward;
	}

	// 不存在机器信息，则进行增加
	public ActionForward skzzxxAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		ActionForward forward = null;
		// TODO Auto-generated method stub
		String nsrwjbm = request.getParameter("nsrwjbm");
		String jqbh = request.getParameter("jqbh");
		String jumpFlag = request.getParameter("jumpFlag");
		String xgsm = request.getParameter("xgsm");
		int xgsmmc = Integer.parseInt(xgsm);
		if (jqbh.length() < 16) {
			for (int i = jqbh.length(); i < 16; i++) {
				jqbh = "0" + jqbh;
			}
		}
		String jqxhbm = request.getParameter("jqxhbm");
		String skkh = request.getParameter("skkh");
		if (skkh.length() < 16) {
			for (int i = skkh.length(); i < 16; i++) {
				skkh = "0" + skkh;
			}
		}

		Jqxx jqxx = new Jqxx();

		String table = "SKQ_JQXX";
		String fieldname = "NSRWJBM";
		jqxx.setTable(table);
		String where = " where JQBH='" + jqbh + "' and STATUS=1";
		String pdNsrwjbm = jqxx.getField(fieldname, where);
		if (pdNsrwjbm != null && !"".equals(pdNsrwjbm)) {
			request.setAttribute("errorMsg", "机器编号：" + jqbh + "，已被纳税人微机编码为："
					+ pdNsrwjbm + "使用，");
			forward = mapping.findForward("error");
		} else {
			where = " where SKKH='" + skkh + "' and STATUS=1";
			pdNsrwjbm = jqxx.getField(fieldname, where);
			if (pdNsrwjbm != null && !"".equals(pdNsrwjbm)) {
				request.setAttribute("errorMsg", "税控卡号：" + skkh
						+ "，已被纳税人微机编码为：" + pdNsrwjbm + "使用，");
				forward = mapping.findForward("error");
			} else {
				String yhkh = skkh;
				String jqszsmStr = (String) request.getParameter("jqszsmStr");

				Calendar c = Calendar.getInstance();// 可以对每个时间域单独修改
				int year = c.get(Calendar.YEAR);
				int month = c.get(Calendar.MONTH) + 1;
				int date = c.get(Calendar.DATE);
				int hour = c.get(Calendar.HOUR_OF_DAY);
				int minute = c.get(Calendar.MINUTE);
				int second = c.get(Calendar.SECOND);

				String kqyrq = year + "-" + month + "-" + date;
				String kyxrq = (year + SYSTEM.KYXNF) + "-" + month + "-" + date;

				String sbfs = SYSTEM.SBFS;
				String mxsbbz = SYSTEM.MXSBBZ;

				String kpjzrq = "";
				if (month == 12) {
					kpjzrq = (year + 1) + "-1-" + SYSTEM.ENDDAY;
				} else {
					kpjzrq = year + "-" + (month + 1) + "-" + SYSTEM.ENDDAY;
				}

				fieldname = "ZSFS";
				where = " where NSRWJBM='" + nsrwjbm + "'";
				table = "SKQ_NSRXX";
				jqxx.setTable(table);
				int zsfs = jqxx.getFieldInt(fieldname, where);

				String jqszsmArr[] = jqszsmStr.split(",");
				String cxJqszsmStr = "";
				for (int i = 0; i < jqszsmArr.length; i++) {
					if ("".equals(cxJqszsmStr)) {
						cxJqszsmStr = "'" + jqszsmArr[i] + "'";
					} else {
						cxJqszsmStr = cxJqszsmStr + ",'" + jqszsmArr[i] + "'";
					}
				}
				Szsm szsm = new Szsm();

				double dzkpxe = 0;
				double yljkpxe = 0;
				double yljtpxe = 0;
				if (zsfs == 0) {
					double czkpxe = szsm.getMaxCzkpxe(cxJqszsmStr);

					yljkpxe = czkpxe;
					dzkpxe = yljkpxe;
					yljtpxe = yljkpxe * SYSTEM.TPXEBL / 100;
				} else {
					int hdkpbl = szsm.getMaxHdkpbl(cxJqszsmStr);

					fieldname = "YHDE";
					where = " where NSRWJBM='" + nsrwjbm + "'";
					double yhde = jqxx.getFieldDouble(fieldname, where);

					yljkpxe = yhde * hdkpbl / 100;
					dzkpxe = yljkpxe;
					yljtpxe = yljkpxe * SYSTEM.TPXEBL / 100;
				}

				try {
					Date date1 = new SimpleDateFormat("yyyy-MM-dd")
							.parse(kqyrq);
					Date date2 = new SimpleDateFormat("yyyy-MM-dd")
							.parse(kyxrq);
					Date date3 = new SimpleDateFormat("yyyy-MM-dd")
							.parse(kpjzrq);

					// 增加
					jqxx.setNsrwjbm(nsrwjbm);
					jqxx.setJqxhbm(jqxhbm);
					jqxx.setJqbh(jqbh);
					jqxx.setSkkh(skkh);
					jqxx.setYhkh(yhkh);
					jqxx.setKqyrq(kqyrq);
					jqxx.setKyxrq(kyxrq);
					jqxx.setSbfs(sbfs);
					jqxx.setMxsbbz(mxsbbz);
					jqxx.setKpjzrq(kpjzrq);
					jqxx.setDzkpxe(dzkpxe);
					jqxx.setYljkpxe(yljkpxe);
					jqxx.setYljtpxe(yljtpxe);
					jqxx.setStatus(1);
					jqxx.setLxkpts(0);
					jqxx.setLxkpzs(0);
					jqxx.setLxkpzje(0);
					jqxx.setXgsmmc(xgsmmc);
					jqxx.setJqszsmStr(jqszsmStr);

					int result = jqxx.add();
					if (result != -1) {
						RequestDispatcher dispatcher = request
								.getRequestDispatcher("taxpayer.do?op=skxxlr&nsrwjbm="
										+ nsrwjbm
										+ "&jqbh="
										+ jqbh
										+ "&jumpFlag=" + jumpFlag);
						dispatcher.forward(request, response);
						forward = null;
					} else {
						request.setAttribute("errorMsg", "机器信息添加失败！");
						forward = mapping.findForward("error");
					}

				} catch (ParseException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
					request.setAttribute("errorMsg", "机器信息添加失败！");
					RequestDispatcher dispatcher = request
							.getRequestDispatcher("error.jsp");
					forward = mapping.findForward("error");
				}
			}
		}
		return forward;
	}

	// skxxlr 开票限额设定界面
	public ActionForward skxxlr(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		// TODO Auto-generated method stub
		String nsrwjbm = request.getParameter("nsrwjbm");
		String jqbh = request.getParameter("jqbh");
		String jumpFlag = request.getParameter("jumpFlag");
		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		Jqxx jqxx = new Jqxx(jqbh);
		request.setAttribute("nsrxx", nsrxx);
		request.setAttribute("jqxx", jqxx);
		request.setAttribute("jumpFlag", jumpFlag);
		return mapping.findForward("toKPXESZ");
	}

	// 限额录入提交界面
	public ActionForward skxxlrAction(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		ActionForward forward = null;
		String nsrwjbm = request.getParameter("nsrwjbm");
		String jqbh = request.getParameter("jqbh");
		String jumpFlag = request.getParameter("jumpFlag");
		String kpjzrq = request.getParameter("kpjzrq");
		double dzkpxe = Double.parseDouble(request.getParameter("dzkpxe"));
		double yljkpxe = Double.parseDouble(request.getParameter("yljkpxe"));
		double yljtpxe = Double.parseDouble(request.getParameter("yljtpxe"));

		int flag = 1;
		if (dzkpxe > SYSTEM.MAXKPXE) {
			flag = 0;
		}
		if (yljkpxe > SYSTEM.MAXKPXE) {
			flag = 0;
		}
		if (yljtpxe > SYSTEM.MAXKPXE) {
			flag = 0;
		}
		int lxkpzje = Integer.valueOf(Double.valueOf(
				request.getParameter("lxkpzje")).intValue());
		int lxkpzs = Integer.valueOf(Double.valueOf(
				request.getParameter("lxkpzs")).intValue());
		int lxkpts = Integer.valueOf(Double.valueOf(
				request.getParameter("lxkpts")).intValue());
		if (flag == 0) {
			request.setAttribute("errorMsg", "限额不能超过42949672.95！");
			forward = mapping.findForward("error");
		} else {
			Jqxx jqxx = new Jqxx(jqbh);
			jqxx.setKpjzrq(kpjzrq);
			jqxx.setDzkpxe(dzkpxe);
			jqxx.setYljkpxe(yljkpxe);
			jqxx.setYljtpxe(yljtpxe);
			jqxx.setLxkpts(lxkpts);
			jqxx.setLxkpzje(lxkpzje);
			jqxx.setLxkpzs(lxkpzs);
			int result = jqxx.update(jqbh);
			if (result != -1) {
				RequestDispatcher dispatcher = request
						.getRequestDispatcher("taxpayer.do?op=fk&nsrwjbm="
								+ nsrwjbm + "&jqbh=" + jqbh + "&jumpFlag="
								+ jumpFlag);
				dispatcher.forward(request, response);
				forward = null;
			} else {
				request.setAttribute("errorMsg", "限额信息更新失败！");
				forward = mapping.findForward("error");
			}
		}
		return forward;
	}

	// 进入发卡界面
	public ActionForward fk(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		String jqbh = request.getParameter("jqbh");
		String jumpFlag = request.getParameter("jumpFlag");
		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		Jqxx jqxx = new Jqxx(jqbh);
		request.setAttribute("nsrxx", nsrxx);
		System.out.println("===" + jqxx.getJqszsm());
		request.setAttribute("jqxx", jqxx);
		request.setAttribute("jumpFlag", jumpFlag);
		log.info("发卡机器信息==="+jqxx.toString(jqxx));
		log.info("发卡纳税人信息==="+nsrxx.toString(nsrxx));
		return mapping.findForward("toFK");
	}

	// 机器信息存在
	public ActionForward skzzxxUpdate(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		ActionForward forward = null;
		String nsrwjbm = request.getParameter("nsrwjbm");
		String jqbh = request.getParameter("jqbh");
		String xgsm = request.getParameter("xgsm");
		int xgsmmc = Integer.parseInt(xgsm);
		 
		String oldJqbh = request.getParameter("oldJqbh");
		String jumpFlag = request.getParameter("jumpFlag");
		if (jqbh.length() < 16) {
			for (int i = jqbh.length(); i < 16; i++) {
				jqbh = "0" + jqbh;
			}
		}
		String jqxhbm = request.getParameter("jqxhbm");
		String skkh = request.getParameter("skkh");
		if (skkh.length() < 16) {
			for (int i = skkh.length(); i < 16; i++) {
				skkh = "0" + skkh;
			}
		}
		String yhkh = skkh;
		String jqszsmStr = request.getParameter("jqszsmStr");
		Jqxx jqxx = new Jqxx(oldJqbh);
		System.out.println("jqxx"+jqxx);
		// 修改
		int lxkpzje = jqxx.getLxkpzje();
		int lxkpzs = jqxx.getLxkpzs();
		int lxkpts = jqxx.getLxkpts();
		jqxx.setNsrwjbm(nsrwjbm);
		jqxx.setJqxhbm(jqxhbm);
		jqxx.setJqbh(jqbh);
		jqxx.setSkkh(skkh);
		jqxx.setYhkh(yhkh);
		jqxx.setLxkpts(lxkpts);
		jqxx.setLxkpzje(lxkpzje);
		jqxx.setLxkpzs(lxkpzs);
		jqxx.setJqszsmStr(jqszsmStr);
		jqxx.setXgsmmc(xgsmmc);
		jqxx.setJqszsmStr(jqszsmStr);

		int result = jqxx.update(oldJqbh);
		if (result != -1) {
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("taxpayer.do?op=skxxlr&nsrwjbm="
							+ nsrwjbm + "&jqbh=" + jqbh + "&jumpFlag="
							+ jumpFlag);
			dispatcher.forward(request, response);
		} else {
			request.setAttribute("errorMsg", "机器信息修改失败！");
			forward = mapping.findForward("error");
		}
		return forward;
	}

	// 以下开始纳税人微机号码存在
	// 更新纳税人信息
	public ActionForward updateNsr(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		request.setAttribute("nsrxx", nsrxx);
		return mapping.findForward("toNsrEdit");
	}
	 public ActionForward updateNsrAction(ActionMapping mapping, ActionForm form,
	 HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

			String nsrwjbm = request.getParameter("nsrwjbm");
			String nsrsbh = request.getParameter("nsrsbh");
			String nsrmc = request.getParameter("nsrmc");
			String jydz = request.getParameter("jydz");
			String frdb = request.getParameter("frdb");
			String zclxbm = request.getParameter("zclxbm");
			String hybm = request.getParameter("hybm");
			String hymxbm = request.getParameter("hymxbm");
			int zsfs = Integer.parseInt(request.getParameter("zsfs"));
			double yhde = 0;
			if (request.getParameter("yhde") != null
					&& !"".equals(request.getParameter("yhde"))) {
				yhde = Double.parseDouble(request.getParameter("yhde"));
			}
			String swjgbm = request.getParameter("swjgbm");
			String bsy = request.getParameter("bsy");
			String ssgly = request.getParameter("ssgly");

			Nsrxx nsrxx = new Nsrxx(nsrwjbm);
			nsrxx.setNsrsbh(nsrsbh);
			nsrxx.setNsrmc(nsrmc.trim());
			nsrxx.setJydz(jydz);
			nsrxx.setFrdb(frdb);
			nsrxx.setZclxbm(zclxbm);
			nsrxx.setHybm(hybm);
			nsrxx.setHymxbm(hymxbm);
			nsrxx.setZsfs(zsfs);
			nsrxx.setYhde(yhde);
			nsrxx.setSwjgbm(swjgbm);
			nsrxx.setBsy(bsy);
			nsrxx.setSsgly(ssgly);

			int result = nsrxx.update();
			if (result != -1) {
				// System.out.println("1111222");
				RequestDispatcher dispatcher = request
						.getRequestDispatcher("/taxpayer.do?op=toCheckTaxpayer&nsrwjbm="
								+ nsrwjbm);
				dispatcher.forward(request, response);
			} else {
				request.setAttribute("errorMsg", "纳税人信息修改失败！");
				return mapping.findForward("error");
			}
			return null;
	 }

	

	// 更新纳税人税种税目
	public ActionForward updateNsrszsm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String nsrwjbm = request.getParameter("nsrwjbm");
		Nsrxx nsrxx = new Nsrxx(nsrwjbm);
		request.setAttribute("nsrxx", nsrxx);
		return mapping.findForward("toNsrSzsmEdit");
	}
	public ActionForward updateNrsSzsm(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		String nsrwjbm = request.getParameter("nsrwjbm");

		Szsm szsm = new Szsm();
		ArrayList alSzsm = szsm.selectAllQy();
		// System.out.println("alSzsm=="+alSzsm);

		Nsrxx nsrxx = new Nsrxx();
		String nsrszsmStr = nsrxx.selectNsrSzsmStr(nsrwjbm);
		if (nsrszsmStr == null) {
			nsrszsmStr = "";
		}

		request.setAttribute("alSzsm", alSzsm);
		request.setAttribute("nsrszsmStr", nsrszsmStr);
		request.setAttribute("nsrwjbm", nsrwjbm);
		RequestDispatcher dispatcher = request
				.getRequestDispatcher("regist/taxpayerTy.nsrszsm.edit.add.jsp");
		dispatcher.forward(request, response);
		return null;
	}
	 public ActionForward updateNrsSzsmAction(ActionMapping mapping, ActionForm form,
	 HttpServletRequest request, HttpServletResponse response) {

			String nsrwjbm = request.getParameter("nsrwjbm");
			String nsrszsmStr = request.getParameter("nsrszsmStr");
			// System.out.println("nsrwjbm==" + nsrwjbm);
			System.out.println("nsrszsmStr==" + nsrszsmStr);
			String[] szsmArr = nsrszsmStr.split(",");
			String szsmStr = "";
			for (int i = 0; i < szsmArr.length; i++) {
				if ("".equals(szsmStr)) {
					szsmStr = "'" + szsmArr[i] + "'";
				} else {
					szsmStr = szsmStr + ",'" + szsmArr[i] + "'";
				}
			}

			Szsm szsm = new Szsm();
			// System.out.println("szsmStr==" + szsmStr);
			ArrayList nsrszsm = szsm.selectBySzsmStr(szsmStr);
			System.out.println("nsrszsm==" + nsrszsm);
			Nsrxx nsrxx = new Nsrxx();
			nsrxx.setNsrszsm(nsrszsm);
			nsrxx.setNsrwjbm(nsrwjbm);
			nsrxx.setQysmbmStr(nsrszsmStr);
			int result = nsrxx.addSzsm();
			if (result != -1) {
				request.setAttribute("url",
						"taxpayer.do?op=toCheckTaxpayer&nsrwjbm="
								+ nsrwjbm);
				request.setAttribute("successMsg", "税种税目添加成功！");
				return mapping.findForward("success");
			} else {
				request.setAttribute("errorMsg", "纳税人税种税目，保存失败！");
				return mapping.findForward("error");
			}
	 }
	 /*
	  * 删除多余税种税目
	  */
	 public ActionForward deleteRepeatSzsm(ActionMapping mapping, ActionForm form,
	 HttpServletRequest request, HttpServletResponse response) {
	 // TODO Auto-generated method stub
		 String sql="delete aa from skq_nsrszsm aa where  exists(select * from skq_nsrszsm where aa.sid>sid and  nsrwjbm=aa.nsrwjbm and smbm=aa.smbm)";
	     Query.updateField(sql);
		 return null;
	 }
	 public ActionForward deleteRepeatFpkj(ActionMapping mapping, ActionForm form,
	 HttpServletRequest request, HttpServletResponse response) {
	 // TODO Auto-generated method stub
		 String sql="delete from skq_fpkj where fphm in (select   fphm from skq_fpkj group by   fphm   having count(fphm) > 1) and sid not in (select min(sid) from   skq_fpkj group by fphm having count(fphm )>1)";
		 System.out.println(sql);
		 Query.updateField(sql);
		 try {
			response.getWriter().print("删除成功！");
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		 return null;
	 }
	 
	 public ActionForward deleteRepeatFpkjmx(ActionMapping mapping, ActionForm form,
			 HttpServletRequest request, HttpServletResponse response) {
			 // TODO Auto-generated method stub
		 String nsrwjbm=request.getParameter("nsrwjbm");
		 String startdate=request.getParameter("startdate");
		 String enddate=request.getParameter("enddate");
				 String sql="delete from skq_fpkj where nsrwjbm='"+nsrwjbm+"' and kprq>'"+startdate+" 00:00:00' and kprq<'"+enddate+" 23:59:59'";
				 System.out.println(sql);
				int count= Query.updateField(sql);
				 try {
					response.getWriter().print("共删除"+count+"条数据！");
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				 return null;
			 }

		/**
		 * 消息发送
		 * 
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return
		 */
		public ActionForward xxfsWlkp(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			String sql = "select * from WLKP_SWJGXX order by CJSJ";
			Xxfs xxfs = new Xxfs();
			ArrayList xxfsList = xxfs.getXxfs(sql);
			request.setAttribute("xxfsList", xxfsList);
			return mapping.findForward("toXxfsListWlkp");

		}

		public ActionForward toXxfsWlkpEdit(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			String guid = request.getParameter("guid");
			Xxfs xxfs = Xxfs.getXxfsByGuid(guid);
			request.setAttribute("xxfs", xxfs);
			return mapping.findForward("toXxfsEdit");
		}

		public ActionForward xxfsEditAction(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			String xxnr = request.getParameter("xxnr");
			String guid = request.getParameter("guid");
			String sql = "update wlkp_swjgxx set xxnr='" + xxnr + "' where guid='"
					+ guid + "'";
			Query.updateField(sql);
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("taxpayer.do?op=xxfsWlkp");
			try {
				dispatcher.forward(request, response);
			} catch (ServletException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
		}

		public ActionForward toXxfsWlkpAdd(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {

			return mapping.findForward("toXxfsAdd");
		}

		public ActionForward xxfsAddAction(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			String xxnr = request.getParameter("xxfsnr");
			HttpSession session = request.getSession();
			String swjgbm = (String) session.getAttribute("yhswjgbm");
			String username = (String) session.getAttribute("username");
			Xxfs xxfs = new Xxfs();
			String s = (new com.eaio.uuid.UUID()).toString();
			String guid = s.substring(0, 8) + s.substring(9, 13)
					+ s.substring(14, 18) + s.substring(19, 23) + s.substring(24);
			xxfs.setGuid(guid);
			xxfs.setSwjgbm(swjgbm);
			xxfs.setXxnr(xxnr);
			xxfs.setCjz(username);
			xxfs.insertXxfs(xxfs);
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("taxpayer.do?op=xxfsWlkp");
			try {
				dispatcher.forward(request, response);
			} catch (ServletException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
		}

		// public ActionForward skzzxxUpdate(ActionMapping mapping, ActionForm form,
		// HttpServletRequest request, HttpServletResponse response) {
		// // TODO Auto-generated method stub
		// return null;
		// }

		public ActionForward xxfsDelete(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			// TODO Auto-generated method stub
			String guid = request.getParameter("guid");
			Xxfs xxfs = new Xxfs();
			xxfs.deleteXxfs(guid);
			RequestDispatcher dispatcher = request
					.getRequestDispatcher("taxpayer.do?op=xxfsWlkp");
			try {
				dispatcher.forward(request, response);
			} catch (ServletException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;
		}

		/**
		 * 停业
		 * 
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return
		 */
		public ActionForward ty(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			HttpSession session = request.getSession();
			ActionForward forward;
			String username = (String) session.getAttribute("username");
			String nsrbm = request.getParameter("nsrwjbm");
			Nsrxx nsrxx = new Nsrxx(nsrbm);
			int sid = nsrxx.getSid();
			if (sid == 0) {
				request.setAttribute("errorMsg", "系统不存在该纳税户！");
				return mapping.findForward("error");
			} else {
				Tfy tfy = new Tfy();
				tfy.setNsrbm(nsrbm);
				tfy.setJqzt("2");
				ArrayList tfyList = (ArrayList) tfy.getTyJqxxList(tfy);
				request.setAttribute("nsrxx", nsrxx);
				request.setAttribute("tfyList", tfyList);
				return mapping.findForward("ty");
			}

		}

		/**
		 * 机器复业
		 * 
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return
		 */
		public ActionForward fy(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			// TODO Auto-generated method stub
			HttpSession session = request.getSession();
			String username = (String) session.getAttribute("username");
			String nsrbm = request.getParameter("nsrwjbm");
			Nsrxx nsrxx = new Nsrxx(nsrbm);
			int sid = nsrxx.getSid();
			if (sid == 0) {
				request.setAttribute("errorMsg", "系统不存在该纳税户！");
				return mapping.findForward("error");
			} else {

				Tfy tfy = new Tfy();
				tfy.setNsrbm(nsrbm);
				tfy.setJqzt("2");
				ArrayList tfyList = (ArrayList) tfy.getFyJqxxList(tfy);
				request.setAttribute("tfyList", tfyList);
				request.setAttribute("nsrxx", nsrxx);
				return mapping.findForward("fy");
			}
		}

		/**
		 * 机器锁定
		 * 
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return
		 */

		public ActionForward jqsd(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			// TODO Auto-generated method stub
			HttpSession session = request.getSession();
			String username = (String) session.getAttribute("username");
			String nsrbm = request.getParameter("nsrwjbm");
			System.out.println("nsrwjbm:=" + nsrbm);
			Nsrxx nsrxx = new Nsrxx(nsrbm);
			int sid = nsrxx.getSid();
			if (sid == 0) {
				request.setAttribute("errorMsg", "系统不存在该纳税户！");
				return mapping.findForward("error");
			} else {
				Jqsd jqsd = new Jqsd();
				ArrayList zcJqxxList = jqsd.selectAllByNsrwjbmAndZt(nsrbm, "1");
				request.setAttribute("nsrxx", nsrxx);
				request.setAttribute("zcJqxxList", zcJqxxList);
				System.out.println("size:" + zcJqxxList.size());
				return mapping.findForward("jqsd");
			}
		}

		public ActionForward sdJqxx(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws ServletException, IOException {
			String nsrbm = request.getParameter("nsrwjbm");
			System.out.println("NSRBM:=" + nsrbm);
			String sdyy = request.getParameter("sdyy");
			String nsrJqxxStr = request.getParameter("nsrJqxxStr");
			HttpSession session = request.getSession();
			String username = (String) session.getAttribute("username");
			if (nsrJqxxStr != null && !"".equals(nsrJqxxStr)) {
				String[] jqxxArr = nsrJqxxStr.split(",");
				String jqbh = "";
				for (int i = 0; i < jqxxArr.length; i++) {
					jqbh = jqxxArr[i];
					Jqsd jqsd = new Jqsd();
					String s = (new com.eaio.uuid.UUID()).toString();
					String uuid = s.substring(0, 8) + s.substring(9, 13)
							+ s.substring(14, 18) + s.substring(19, 23)
							+ s.substring(24);
					jqsd.setGuid(uuid);
					jqsd.setNsrbm(nsrbm);
					jqsd.setJqbh(jqbh);
					String sdsj = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
							.format(new Date());
					jqsd.setSdsj(sdsj);
					jqsd.setSdczy(username);
					jqsd.setSdyy(sdyy);
					jqsd.setJqzt("4");
					jqsd.addJqSdxx(jqsd);
					jqsd.updateJqztSd("4", jqbh, nsrbm);

				}
			}

			Jqsd jqsd = new Jqsd();
			ArrayList zcJqxxList = jqsd.selectAllByNsrwjbmAndZt(nsrbm, "1");
			Nsrxx nsrxx = new Nsrxx(nsrbm);
			request.setAttribute("nsrxx", nsrxx);
			request.setAttribute("zcJqxxList", zcJqxxList);
			System.out.println("size:" + zcJqxxList.size());
			return mapping.findForward("jqsd");

		}

		/**
		 * 注销
		 * 
		 * @param mapping
		 * @param form
		 * @param request
		 * @param response
		 * @return
		 */
		public ActionForward zx(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			// TODO Auto-generated method stub
			HttpSession session = request.getSession();
			String username = (String) session.getAttribute("username");
			String nsrbm = request.getParameter("nsrwjbm");
			System.out.println("nsrwjbm:=" + nsrbm);
			Nsrxx nsrxx = new Nsrxx(nsrbm);
			int sid = nsrxx.getSid();
			if (sid == 0) {
				request.setAttribute("errorMsg", "系统不存在该纳税户！");
				return mapping.findForward("error");
			} else {
				JqZx jqZx = new JqZx();
				jqZx.setNsrbm(nsrbm);
				jqZx.setJqzt("3");
				ArrayList jqZxList = jqZx.zxJqxx("3", nsrbm);
				request.setAttribute("nsrxx", nsrxx);
				request.setAttribute("jqZxList", jqZxList);
				return mapping.findForward("zx");
			}
		}

		public ActionForward tyxxlr(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			String nsrbm = request.getParameter("nsrbm");
			String jqbh = request.getParameter("jqbh");
			System.out.println("jqbh:=" + jqbh);
			Nsrxx nsrxx = new Nsrxx(nsrbm);
			request.setAttribute("nsrxx", nsrxx);
			request.setAttribute("jqbh", jqbh);
			return mapping.findForward("tyxxlr");
		}

		// 更新机器机器注销等信息
		public ActionForward updateZxxx(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws ServletException, IOException {
			String jqbh = request.getParameter("jqbh");
			String nsrbm = request.getParameter("nsrbm");
			String shyj = request.getParameter("shyj");
			String zxyy = request.getParameter("zxyy");
			String clsj = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
					.format(new Date());
			HttpSession session = request.getSession();
			String username = (String) session.getAttribute("username");
			JqZx jqZx = new JqZx();
			jqZx.setNsrbm(nsrbm);
			jqZx.setJqbh(jqbh);
			jqZx.setShyj(shyj);
			jqZx.setZxyy(zxyy);
			jqZx.setClsj(clsj);
			jqZx.setClz(username);
			try {
				jqZx.updateZxxx(jqZx);
			} catch (Exception e) {
			}
			jqZx = new JqZx();
			jqZx.setNsrbm(nsrbm);
			jqZx.setJqzt("3");
			Nsrxx nsrxx = new Nsrxx(nsrbm);
			ArrayList jqZxList = jqZx.zxJqxx("3", nsrbm);
			request.setAttribute("nsrxx", nsrxx);
			request.setAttribute("jqZxList", jqZxList);
			return mapping.findForward("zx");
		}

		public ActionForward updateTyxx(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws IOException, ServletException {
			HttpSession session = request.getSession();
			String username = (String) session.getAttribute("username");
			String nsrbm = request.getParameter("nsrbm");
			String jqbh = request.getParameter("jqbh");
			String tyyy = request.getParameter("tyyy");
			String shyj = request.getParameter("shyj");
			Tfy tfy = new Tfy();
			tfy.setNsrbm(nsrbm);
			tfy.setJqbh(jqbh);
			tfy.setTyyy(tyyy);
			tfy.setShyj(shyj);
			tfy.setTyczsj(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
					.format(new Date()));
			tfy.setTyczy(username);
			tfy.setJqzt("2");
			tfy.updateTyxx(tfy);
			request.getRequestDispatcher("taxpayer.do?op=ty&nsrwjbm=" + nsrbm)
					.forward(request, response);
			return null;
		}

		public ActionForward fyxxlr(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			String nsrbm = request.getParameter("nsrbm");
			String jqbh = request.getParameter("jqbh");
			Nsrxx nsrxx = new Nsrxx(nsrbm);
			request.setAttribute("nsrxx", nsrxx);
			request.setAttribute("jqbh", jqbh);
			return mapping.findForward("fyxxlr");
		}

		public ActionForward updateFyxx(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws ServletException, IOException {
			HttpSession session = request.getSession();
			String username = (String) session.getAttribute("username");
			String nsrbm = request.getParameter("nsrbm");
			String jqbh = request.getParameter("jqbh");
			String shyj = request.getParameter("shyj");
			Tfy tfy = new Tfy();
			tfy.setNsrbm(nsrbm);
			tfy.setJqbh(jqbh);
			tfy.setShyj(shyj);
			tfy.setFyczsj(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
					.format(new Date()));
			tfy.setFysj(new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
					.format(new Date()));
			tfy.setFyczy(username);
			tfy.setJqzt("1");
			try {
				tfy.updateFyxx(tfy);
				tfy.fyUpdateJqzt(nsrbm, jqbh, "1");
				request.getRequestDispatcher("taxpayer.do?op=fy&nsrwjbm=" + nsrbm)
						.forward(request, response);
			} catch (Exception e) {
				log.error("updateTyxx:" + e.getMessage());
				String msg = "机器复业失败，请重新操作！";
				String btnStr = "<input type=\"button\" class=\"btn\" value=\" 返&nbsp;回 \"  onclick=\"window.location.href='"
						+ "/jqgl/fyWlkp.jsp';\"/> ";
				request.setAttribute("msg", msg);
				request.setAttribute("btnStr", btnStr);
				return mapping.findForward("error");
			}
			return null;
		}

		public ActionForward zxxxlr(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws ServletException, IOException {
			String nsrbm = request.getParameter("nsrbm");
			String jqbh = request.getParameter("jqbh");
			Nsrxx nsrxx = new Nsrxx(nsrbm);
			Jqxx jqxx = new Jqxx(jqbh);
			request.setAttribute("nsrxx", nsrxx);
			request.setAttribute("jqbh", jqbh);
			return mapping.findForward("zxxxlr");

		}

		/**
		 * 解锁
		 * 
		 */
		public ActionForward jqjs(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response)
				throws ServletException, IOException {
			String nsrbm = request.getParameter("nsrwjbm");
			Nsrxx nsrxx = new Nsrxx(nsrbm);
			int sid = nsrxx.getSid();
			if (sid == 0) {
				request.setAttribute("errorMsg", "系统不存在该纳税户！");
				return mapping.findForward("error");
			} else {
				Jqsd jqsd = new Jqsd();
				ArrayList sdJqxxList = jqsd.selectAllByNsrwjbmAndZt(nsrbm, "4");
				request.setAttribute("nsrxx", nsrxx);
				request.setAttribute("sdJqxxList", sdJqxxList);
				System.out.println("size:" + sdJqxxList.size());
				return mapping.findForward("jqjs");
			}

		}

		public ActionForward jsJqxx(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			String nsrbm = request.getParameter("nsrwjbm");
			System.out.println("NSRBM:=" + nsrbm);
			String sdyy = request.getParameter("sdyy");
			String nsrJqxxStr = request.getParameter("nsrJqxxStr");
			HttpSession session = request.getSession();
			String username = (String) session.getAttribute("username");
			if (nsrJqxxStr != null && !"".equals(nsrJqxxStr)) {
				String[] jqxxArr = nsrJqxxStr.split(",");
				String jqbh = "";
				for (int i = 0; i < jqxxArr.length; i++) {
					jqbh = jqxxArr[i];
					Jqsd jqsd = new Jqsd();
					String s = (new com.eaio.uuid.UUID()).toString();
					String uuid = s.substring(0, 8) + s.substring(9, 13)
							+ s.substring(14, 18) + s.substring(19, 23)
							+ s.substring(24);
					jqsd.setGuid(uuid);
					jqsd.setNsrbm(nsrbm);
					jqsd.setJqbh(jqbh);
					String sdsj = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss")
							.format(new Date());
					jqsd.setSdsj(sdsj);
					jqsd.setSdczy(username);
					jqsd.setSdyy(sdyy);
					jqsd.setJqzt("1");
					jqsd.addJqSdxx(jqsd);
					jqsd.updateJqztSd("1", jqbh, nsrbm);

				}
			}

			Jqsd jqsd = new Jqsd();
			ArrayList sdJqxxList = jqsd.selectAllByNsrwjbmAndZt(nsrbm, "4");
			Nsrxx nsrxx = new Nsrxx(nsrbm);
			request.setAttribute("nsrxx", nsrxx);
			request.setAttribute("sdJqxxList", sdJqxxList);
			System.out.println("size:" + sdJqxxList.size());
			try {
				request.getRequestDispatcher("taxpayer.do?op=jqjs&nsrwjbm=" + nsrbm)
						.forward(request, response);
			} catch (ServletException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			return null;

		}
		public ActionForward deleteNSR(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			// TODO Auto-generated method stub
			String nsrwjbm=request.getParameter("nsrwjbm");
			String sql="delete from skq_nsrxx where nsrwjbm='"+nsrwjbm+"'";
			Query.updateField(sql);
			sql="delete from skq_jqxx where nsrwjbm='"+nsrwjbm+"'";
			Query.updateField(sql);
			sql="delete from skq_nsrszsm where nsrwjbm='"+nsrwjbm+"'";
			Query.updateField(sql);
			return mapping.findForward("toImport");
		}
		
		public ActionForward updateJqcsh(ActionMapping mapping, ActionForm form,
				HttpServletRequest request, HttpServletResponse response) {
			// TODO Auto-generated method stub
			String jqbh=request.getParameter("jqbh");
			String sql="update skq_jqxx set cshsj=null where jqbh='"+jqbh+"'";
			Query.updateField(sql);
			String nsrwjbm = request.getParameter("nsrwjbm");
			Nsrxx nsrxx = new Nsrxx(nsrwjbm);
			request.setAttribute("nsrxx", nsrxx);
			return mapping.findForward("isExist");
			 
		}
//	 public ActionForward skzzxxUpdate(ActionMapping mapping, ActionForm form,
//			 HttpServletRequest request, HttpServletResponse response) {
//			 // TODO Auto-generated method stub
//			 return null;
//			 }

	// public ActionForward skzzxxUpdate(ActionMapping mapping, ActionForm form,
	// HttpServletRequest request, HttpServletResponse response) {
	// // TODO Auto-generated method stub
	// return null;
	// }

}